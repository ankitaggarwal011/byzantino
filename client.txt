Client:
    # client state variables
    # Assumption: the wait() function waits for a wrapped function to be called, or a timeout to occur
    # if the timeout occurs, execution continues beyond the wait statement. Else, control switches to the
    # wrapped function.

    # Assumption: the on_message_received() function can be called on an object in response to a message received
    # by an object. We model different messages as different functions for clarity. Each function has variable arguments
    # corresponding to information passed with the message.

    # Assumption: the variable 'o' corresponds to a generic operation being executed by the client on the replicas

    # Assumption: hash utility function that calculates hash of the given data

    Olympus                  #
    T                        # Max number of tolerated failures in system
    timeout                  # client's timeout for queries
    replicas = []            # replica IDs in the current configuration
    replica_public_keys = {} # mapping of replica ID vs its public key


    # client initialization
    Client(T_value, olympus, client_timeout): # Create a new client with specified value of T, Olympus and timeout
        T = timeout_value
        Olympus = olympus
        timeout = client_timeout


    # client methods
    request_configuration():
        send('get_configuration') to Olympus
        wait(on_message_received('configuration'), timeout)


     on_message_received('configuration', replicas, replica_public_keys):
        replicas = replicas
        replica_public_keys = replica_public_keys


     generate_request_id(): returns random monotonic request ID, like timestamp, UUID


     execute_operation(o):
        # o is the operation that the client wants to execute
        request_configuration()      # we assume that configuration is now updated through Olympus
        request_id = generate_request_id()
        head = replicas[0]
        send('request', o, request_id) to head
        wait(on_message_received('result'), timeout)  # if no result is received
                                                      # till timeout value, we move forward assuming that this request failed
        handle_request_retry(request_id, o)

     # Assumption: when any replica sends result to the client, it also includes the operation o so that client can stay stateless
     # result_proofs is a list of size(num_replicas). Each item is a hash of pair <o, hash(result)> at each replica
     on_message_received('result', result, result_proofs, o):
        # On receiving a result, check if the result hash is correct for at least (T + 1) replicas so that at least one is honest
        # Assumption: result_proofs from each replica r' are in the same order as replicas
        verified_count = 0
        for i from 1 to size(replicas):
            if verify_signature(<o, hash(result)>, result_proofs[i], replica_public_keys[i]) == true:
                verified_count += 1

        if verified_count >= T + 1:
            log('Operation successful', o)
        else
            log('Operation failure', o)
            send(Olympus, 'request_reconfiguration_client', result, result_proofs, o)


     on_message_received('retry_error', o) {
        # This means that re-configuration is taking place in the system. Retry again after a while.
        wait (timeout)
        execute_operation(o)  # this is a fresh request that will re-fetch configuration and do the
                              # entire process again
    }

     handle_request_retry(request_id, o):
        # now we will retry our request by sending to all replicas in the chain, not just the head
        for i from 1 to size(replicas) in parallel:
            send('request', o, request_id) to replica[i]
            wait (on_message_received('result' || 'retry_error'), timeout)


     log(message, o):
        # function that logs a message corresponding to an operation


     verify_signature(message, signature, key):
        # this Crypto function determines if the signature computed for message is valid with specified key
        # Standard implementations can be found in Crypto libraries
