# -*- generated by 1.0.9 -*-
import da
PatternExpr_428 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.FreePattern('sender')])
PatternExpr_447 = da.pat.TuplePattern([da.pat.ConstantPattern('Get_configuration'), da.pat.FreePattern('client'), da.pat.FreePattern('client_name'), da.pat.FreePattern('client_id'), da.pat.FreePattern('client_public_key')])
PatternExpr_596 = da.pat.TuplePattern([da.pat.ConstantPattern('wedge'), da.pat.FreePattern('hist'), da.pat.FreePattern('checkpoint_proof'), da.pat.FreePattern('hashed_running_state'), da.pat.FreePattern('replica'), da.pat.FreePattern('ts')])
PatternExpr_656 = da.pat.TuplePattern([da.pat.ConstantPattern('wedge'), da.pat.FreePattern('hist'), da.pat.FreePattern('checkpoint_proof'), da.pat.FreePattern('hashed_running_state'), da.pat.FreePattern('replica'), da.pat.FreePattern('ts')])
PatternExpr_696 = da.pat.TuplePattern([da.pat.ConstantPattern('wedge'), da.pat.FreePattern('hist'), da.pat.FreePattern('checkpoint_proof'), da.pat.FreePattern('hashed_running_state'), da.pat.FreePattern('replica'), da.pat.FreePattern('ts')])
PatternExpr_1089 = da.pat.TuplePattern([da.pat.ConstantPattern('catch_up'), da.pat.BoundPattern('_BoundPattern1092_'), da.pat.BoundPattern('_BoundPattern1093_')])
PatternExpr_1122 = da.pat.TuplePattern([da.pat.ConstantPattern('wedge'), da.pat.BoundPattern('_BoundPattern1126_'), da.pat.BoundPattern('_BoundPattern1128_'), da.pat.BoundPattern('_BoundPattern1130_'), da.pat.FreePattern('replica')])
PatternExpr_1145 = da.pat.TuplePattern([da.pat.ConstantPattern('caught_up'), da.pat.FreePattern('replica'), da.pat.FreePattern('timestamp')])
PatternExpr_1164 = da.pat.TuplePattern([da.pat.ConstantPattern('Reconfiguration'), da.pat.FreePattern('sender'), da.pat.FreePattern('proof_of_misbehavior')])
PatternExpr_1279 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])
PatternExpr_1302 = da.pat.ConstantPattern('Shutdown')
PatternExpr_1286 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])])
PatternExpr_1306 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.ConstantPattern('Shutdown')])
PatternExpr_1096 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('catch_up'), da.pat.BoundPattern('_BoundPattern1106_'), da.pat.BoundPattern('_BoundPattern1107_')])])
_config_object = {}
from nacl.hash import sha256
from nacl.encoding import HexEncoder
from nacl.signing import SigningKey, VerifyKey
from nacl.exceptions import BadSignatureError
from ast import literal_eval
replica_module = da.import_da('replica')
from time import time
from config import *
import read_config

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_2 = []
        self._OlympusReceivedEvent_3 = []
        self._OlympusReceivedEvent_4 = []
        self._OlympusReceivedEvent_5 = []
        self._OlympusReceivedEvent_9 = []
        self._OlympusReceivedEvent_10 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_428, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_427]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_447, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_446]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_596, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_3', PatternExpr_656, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_4', PatternExpr_696, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_5', PatternExpr_1089, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_6', PatternExpr_1122, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1121]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_7', PatternExpr_1145, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1144]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_8', PatternExpr_1164, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1163]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_9', PatternExpr_1279, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_10', PatternExpr_1302, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, name, num_replicas, num_failures, all_replica_conf_failures, head_timeout, replica_timeout, **rest_1328):
        super().setup(name=name, num_replicas=num_replicas, num_failures=num_failures, all_replica_conf_failures=all_replica_conf_failures, head_timeout=head_timeout, replica_timeout=replica_timeout, **rest_1328)
        self._state.name = name
        self._state.num_replicas = num_replicas
        self._state.num_failures = num_failures
        self._state.all_replica_conf_failures = all_replica_conf_failures
        self._state.head_timeout = head_timeout
        self._state.replica_timeout = replica_timeout
        self._state.state = 'NORMAL'
        self._state.num_failures = self._state.num_failures
        self._state.replicas = dict()
        self._state.replica_private_keys = list()
        self._state.replica_public_keys = list()
        self._state.head = None
        self._state.tail = None
        self._state.private_key = SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key.encode(encoder=HexEncoder)
        self._state.configuration_number = 0
        self._state.client_keys = {}
        all_replica_failures = self._state.all_replica_conf_failures.get(self._state.configuration_number, {})
        for i in range(self._state.num_replicas):
            replica_failures = all_replica_failures.get(i, {})
            if (i == 0):
                replica = self.new(replica_module.Replica, args=(i, 'Head', replica_failures, self._state.head_timeout, self._state.public_key), at='Node2')
                self._state.head = replica
            elif (i == (self._state.num_replicas - 1)):
                replica = self.new(replica_module.Replica, args=(i, 'Tail', replica_failures, self._state.replica_timeout, self._state.public_key), at='Node2')
                self._state.tail = replica
            else:
                replica = self.new(replica_module.Replica, args=(i, ('Replica ' + str(i)), replica_failures, self._state.replica_timeout, self._state.public_key), at='Node2')
            self._state.replicas[i] = replica
            replica_name = ('Replica ' + str(i))
            self.output_wrapper('Olympus created replica process: {}'.format(replica_name))
            signing_key = SigningKey.generate()
            verify_key = signing_key.verify_key.encode(encoder=HexEncoder)
            self.output_wrapper('Olympus created keys for replica process: {}. Public key: {}'.format(replica_name, str(verify_key)))
            self._state.replica_private_keys.append(signing_key)
            self._state.replica_public_keys.append(verify_key)

    def run(self):
        for (i, r) in self._state.replicas.items():
            self._start(r)
            self.sign_and_send(('Configuration', self._id, self._state.replicas, self._state.head, self._state.tail, [self._state.replica_public_keys, self._state.configuration_number]), r)
            self.send(('Key', self._state.replica_private_keys[i]), to=r)
        super()._label('_st_label_1276', block=False)
        _st_label_1276 = 0
        while (_st_label_1276 == 0):
            _st_label_1276 += 1
            if PatternExpr_1286.match_iter(self._OlympusReceivedEvent_9, SELF_ID=self._id):
                _st_label_1276 += 1
            else:
                super()._label('_st_label_1276', block=True)
                _st_label_1276 -= 1
        super()._label('_st_label_1299', block=False)
        _st_label_1299 = 0
        while (_st_label_1299 == 0):
            _st_label_1299 += 1
            if PatternExpr_1306.match_iter(self._OlympusReceivedEvent_10, SELF_ID=self._id):
                _st_label_1299 += 1
            else:
                super()._label('_st_label_1299', block=True)
                _st_label_1299 -= 1

    def begin_reconfiguration(self):
        if (self._state.state == 'RECONFIGURATION'):
            self.output_wrapper('System already in reconfiguration. ignoring new reconfiguration command')
            return
        self._state.state = 'RECONFIGURATION'
        self.output_wrapper(('Sending wedge requests to replicas: ' + str(len(self._state.replicas))))
        self.output_wrapper(('Sending wedge requests: checking replicas:  ' + str(self._state.replicas)))
        for (i, r) in self._state.replicas.items():
            self.output_wrapper(('Sending wedge requests to replica: ' + str(i)))
            self.send(('wedge_request', self._id), to=r)
        quorum_size = 0
        quorum_range = []
        send_ts = time()
        num_wedge_responses = 0
        super()._label('_st_label_593', block=False)
        replica = checkpoint_proof = ts = hashed_running_state = hist = None

        def ExistentialOpExpr_594():
            nonlocal replica, checkpoint_proof, ts, hashed_running_state, hist
            for (_, _, (_ConstantPattern619_, hist, checkpoint_proof, hashed_running_state, replica, ts)) in self._OlympusReceivedEvent_2:
                if (_ConstantPattern619_ == 'wedge'):
                    if (ts >= send_ts):
                        return True
            return False
        _st_label_593 = 0
        self._timer_start()
        while (_st_label_593 == 0):
            _st_label_593 += 1
            if ExistentialOpExpr_594():
                while True:
                    self.output_wrapper('Waiting for wedge statements')
                    super()._label('wedge', block=False)
                    curr_ts = time()
                    if ((curr_ts - send_ts) >= 0.05):
                        self.output_wrapper('Timed out waiting for wedge statements. ')
                        break
                    super()._label('_st_label_653', block=False)
                    replica = checkpoint_proof = ts = hashed_running_state = hist = None

                    def ExistentialOpExpr_654():
                        nonlocal replica, checkpoint_proof, ts, hashed_running_state, hist
                        for (_, _, (_ConstantPattern674_, hist, checkpoint_proof, hashed_running_state, replica, ts)) in self._OlympusReceivedEvent_3:
                            if (_ConstantPattern674_ == 'wedge'):
                                if (ts >= send_ts):
                                    return True
                        return False
                    _st_label_653 = 0
                    while (_st_label_653 == 0):
                        _st_label_653 += 1
                        if ExistentialOpExpr_654():
                            self.output_wrapper('Received some wedged statements')
                            wss = [(hist, checkpoint_proof, hashed_running_state, replica, ts) for (_, _, (_ConstantPattern714_, hist, checkpoint_proof, hashed_running_state, replica, ts)) in self._OlympusReceivedEvent_4 if (_ConstantPattern714_ == 'wedge') if (ts >= send_ts)]
                            if (len(wss) < (self._state.num_failures + 1)):
                                continue
                            self.output_wrapper('We have quorum length')
                            len_wss = len(wss)
                            self.output_wrapper(('Len_Wss is ' + str(len_wss)))
                            qs = (self._state.num_failures + 1)
                            self.output_wrapper(('QS is ' + str(qs)))
                            for i in range(0, ((len_wss - qs) + 1)):
                                indices_range = range(i, (i + qs))
                                histories = list()
                                self.output_wrapper(('Indices range is ' + str(indices_range)))
                                for j in indices_range:
                                    histories.append(wss[j][0])
                                res = self.is_valid_quorum(histories)
                                if (res[0] == True):
                                    quorum_replicas = []
                                    for j in indices_range:
                                        quorum_replicas.append(wss[j][3])
                                    self.on_successful_quorum(histories, quorum_replicas)
                            _st_label_653 += 1
                        else:
                            super()._label('_st_label_653', block=True)
                            _st_label_653 -= 1
                    else:
                        if (_st_label_653 != 2):
                            continue
                    if (_st_label_653 != 2):
                        break
                _st_label_593 += 1
            elif self._timer_expired:
                self.output_wrapper('Timed out while waiting for wedged statements')
                _st_label_593 += 1
            else:
                super()._label('_st_label_593', block=True, timeout=5)
                _st_label_593 -= 1
        self._state.state = 'NORMAL'
        return

    def is_valid_quorum(self, histories, indices):
        self.output_wrapper('In is_valid_quorum')
        self.output_wrapper(('Histories: ' + str(histories)))
        self.output_wrapper(('Indices: ' + str(indices)))
        for i in range(0, len(histories)):
            for j in range(0, len(histories)):
                for k in range(0, len(histories[i])):
                    self.output_wrapper(((((('i: ' + str(i)) + ' j: ') + str(j)) + ' k: ') + str(k)))
                    matches = list(set([v[1] for (i, v) in enumerate(histories[j]) if (v[0] == histories[i][k][0])]))
                    self.output_wrapper(('Matches: ' + str(matches)))
                    if ((len(matches) > 1) or (not (matches[0] == histories[i][k][1]))):
                        return (False, None)
        self.output_wrapper('Quorum is valid!!')
        return (True, None)

    def on_successful_quorum(self, histories, quorum_replicas):
        max_hist_len = (- 1)
        max_hist = []
        for i in range(0, len(histories)):
            if (len(histories[i]) > max_hist_len):
                max_hist_len = len(histories[i])
                max_hist = histories[i]
        send_ts = time()
        for (i, r) in enumerate(quorum_replicas):
            gap = list((set(max_hist) - set(histories[i])))
            self.send(('catch_up', gap), to=r)
        super()._label('_st_label_1076', block=False)
        _st_label_1076 = 0
        self._timer_start()
        while (_st_label_1076 == 0):
            _st_label_1076 += 1
            if (len((replica, ts), (ts >= send_ts), PatternExpr_1096.match_iter(self._OlympusReceivedEvent_5, _BoundPattern1106_=replica, _BoundPattern1107_=ts, SELF_ID=self._id)) > len(histories)):
                self.output_wrapper('Received replies from all replicas')
                _st_label_1076 += 1
            elif self._timer_expired:
                self.output_wrapper('Timed out while waiting for caught up messages')
                _st_label_1076 += 1
            else:
                super()._label('_st_label_1076', block=True, timeout=3)
                _st_label_1076 -= 1

    def sign_and_send(self, data, to_):
        data = list(data)
        data[(- 1)] = self._state.private_key.sign(str(data[(- 1)]).encode('utf-8'))
        self.send(tuple(data), to=to_)

    def verify_data_with_key(self, data, pub_key):
        try:
            pub_key.verify(data)
            return literal_eval(data.message.decode('utf-8'))
        except BadSignatureError:
            return None

    def output_wrapper(self, log):
        self.output('[{}][TS: {}]'.format(self._state.name, str(time())), log)

    def _Olympus_handler_427(self, sender):
        self.output_wrapper((('ACK from ' + str(sender)) + '.'))
    _Olympus_handler_427._labels = None
    _Olympus_handler_427._notlabels = None

    def _Olympus_handler_446(self, client, client_name, client_id, client_public_key):
        self._state.client_keys[client_id] = VerifyKey(client_public_key, encoder=HexEncoder)
        self.send(('Configuration', self._state.replicas, self._state.head), to=client)
        self.send(('Keys', self._state.replica_public_keys, self._state.public_key), to=client)
        for (i, r) in self._state.replicas.items():
            self.send(('Client_keys', client_id, client_public_key), to=r)
        self.output_wrapper('Received public key: {} from client: {}'.format(str(client_public_key), str(client_name)))
        self.output_wrapper((('Configuration sent to ' + str(client_name)) + '.'))
    _Olympus_handler_446._labels = None
    _Olympus_handler_446._notlabels = None

    def _Olympus_handler_1121(self, replica):
        self.output_wrapper(('Wedge msg handler from: ' + str(replica)))
    _Olympus_handler_1121._labels = None
    _Olympus_handler_1121._notlabels = None

    def _Olympus_handler_1144(self, replica, timestamp):
        self.output_wrapper(('Caught up msg handler from: ' + str(replica)))
    _Olympus_handler_1144._labels = None
    _Olympus_handler_1144._notlabels = None

    def _Olympus_handler_1163(self, sender, proof_of_misbehavior):
        self.output_wrapper((('Reconfiguration request received from ' + str(sender)) + '.'))
        self.begin_reconfiguration()
    _Olympus_handler_1163._labels = None
    _Olympus_handler_1163._notlabels = None
