# -*- generated by 1.0.9 -*-
import da
PatternExpr_353 = da.pat.ConstantPattern('Shutdown')
PatternExpr_357 = da.pat.BoundPattern('_BoundPattern358_')
PatternExpr_371 = da.pat.ConstantPattern('Shutdown')
PatternExpr_375 = da.pat.FreePattern('olympus')
PatternExpr_389 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.FreePattern('olympus_'), da.pat.FreePattern('replicas_'), da.pat.FreePattern('head_'), da.pat.FreePattern('tail_'), da.pat.FreePattern('config_data')])
PatternExpr_463 = da.pat.TuplePattern([da.pat.ConstantPattern('Key'), da.pat.FreePattern('private_key_')])
PatternExpr_470 = da.pat.FreePattern('olympus')
PatternExpr_490 = da.pat.TuplePattern([da.pat.ConstantPattern('Client_keys'), da.pat.FreePattern('client_id'), da.pat.FreePattern('client_public_key')])
PatternExpr_528 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Request'), da.pat.FreePattern('type'), da.pat.FreePattern('request_from'), da.pat.FreePattern('client'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('args')])
PatternExpr_731 = da.pat.BoundPattern('_BoundPattern737_')
PatternExpr_968 = da.pat.BoundPattern('_BoundPattern974_')
PatternExpr_1299 = da.pat.BoundPattern('_BoundPattern1305_')
PatternExpr_1331 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Result_shuttle'), da.pat.FreePattern('request_from'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('result_shuttle')])
PatternExpr_1607 = da.pat.TuplePattern([da.pat.ConstantPattern('wedge_request'), da.pat.FreePattern('source')])
PatternExpr_359 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern365_')]), da.pat.ConstantPattern('Shutdown')])
PatternExpr_739 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern746_')])
PatternExpr_976 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern983_')])
PatternExpr_1307 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern1314_')])
_config_object = {}
from nacl.hash import sha256
from nacl.encoding import HexEncoder
from nacl.signing import SigningKey, VerifyKey
from nacl.exceptions import BadSignatureError
from ast import literal_eval
from time import time
from config import *
import read_config

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_6 = []
        self._ReplicaReceivedEvent_7 = []
        self._ReplicaReceivedEvent_8 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_353, sources=[PatternExpr_357], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_371, sources=[PatternExpr_375], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_370]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_389, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_388]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_463, sources=[PatternExpr_470], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_462]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_490, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_489]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_5', PatternExpr_528, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_527]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_6', PatternExpr_731, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_7', PatternExpr_968, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_8', PatternExpr_1299, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_9', PatternExpr_1331, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1330]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_10', PatternExpr_1607, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1606])])

    def setup(self, id, name, replica_failures, replica_timeout, olympus_public_key, **rest_2014):
        super().setup(id=id, name=name, replica_failures=replica_failures, replica_timeout=replica_timeout, olympus_public_key=olympus_public_key, **rest_2014)
        self._state.id = id
        self._state.name = name
        self._state.replica_failures = replica_failures
        self._state.replica_timeout = replica_timeout
        self._state.olympus_public_key = olympus_public_key
        self.output_wrapper(('replica failures: ' + str(self._state.replica_failures)))
        self._state.status = 0
        self._state.running_state = dict()
        self._state.order_proof = list()
        self._state.result_proof = list()
        self._state.result_cache = dict()
        self._state.slot_number = 0
        self._state.last_slot_number = 0
        self._state.olympus = None
        self._state.replicas = None
        self._state.head = None
        self._state.tail = None
        self._state.replica_public_keys = None
        self._state.private_key = None
        self._state.client_keys = dict()
        self._state.configuration = None
        self._state.pending_failures = {}
        self._state.pending_failure_scenarios = {}
        self._state.messages_received_from_client = {}
        self._state.messages_shuttle = {}
        self._state.messages_result_shuttle = {}
        self._state.messages_forwarded_request = {}

    def run(self):
        self._state.status = 1
        self._state.olympus_public_key = VerifyKey(self._state.olympus_public_key, encoder=HexEncoder)
        super()._label('_st_label_350', block=False)
        _st_label_350 = 0
        while (_st_label_350 == 0):
            _st_label_350 += 1
            if PatternExpr_359.match_iter(self._ReplicaReceivedEvent_0, _BoundPattern365_=self._state.olympus, SELF_ID=self._id):
                _st_label_350 += 1
            else:
                super()._label('_st_label_350', block=True)
                _st_label_350 -= 1

    def update_running_state(self, type, args):
        if (type == 'put'):
            if (len(args) > 1):
                self._state.running_state[args[0]] = args[1]
            return 'OK'
        elif (type == 'get'):
            if (len(args) > 0):
                if (args[0] in self._state.running_state):
                    return self._state.running_state[args[0]]
                else:
                    return ''
        elif (type == 'slice'):
            if (len(args) > 1):
                (lower, upper) = map(int, args[1].split(':'))
                if ((args[0] in self._state.running_state) and (lower >= 0) and (upper <= len(self._state.running_state[args[0]]))):
                    self._state.running_state[args[0]] = self._state.running_state[args[0]][lower:upper]
                    return self._state.running_state[args[0]]
                else:
                    return 'fail'
        elif (type == 'append'):
            if (len(args) > 1):
                if (args[0] in self._state.running_state):
                    self._state.running_state[args[0]] = (self._state.running_state[args[0]] + args[1])
                    return 'OK'
                else:
                    return 'fail'

    def calculate_hash(self, val):
        if isinstance(val, str):
            return sha256(str.encode(val), encoder=HexEncoder)
        return sha256(val, encoder=HexEncoder)

    def validate_shuttle(self, shuttle):
        (self._state.order_proof, self._state.result_proof) = shuttle
        (self._state.slot_number, operation, self._state.configuration, order_stmt) = self._state.order_proof
        if (not (self._state.last_slot_number == (self._state.slot_number - 1))):
            return False
        for stmt in order_stmt:
            if ((not (stmt[0] == self._state.slot_number)) or (not (stmt[1] == operation)) or (not (stmt[2] == self._state.configuration))):
                return False
        return True

    def validate_result_shuttle(self, result_shuttle):
        (result, self._state.result_proof) = result_shuttle
        if (not (len(self._state.result_proof) == len(self._state.replicas))):
            return False
        hash = self.calculate_hash(result)
        for i in self._state.result_proof:
            if (not (hash == i[1])):
                return False
        return True

    def sign_and_send(self, data, to_):
        data = ([self._state.id] + list(data))
        data[(- 1)] = self._state.private_key.sign(str(data[(- 1)]).encode('utf-8'))
        self.send(tuple(data), to=to_)

    def verify_data_with_key(self, data, pub_key):
        try:
            pub_key.verify(data)
            return literal_eval(data.message.decode('utf-8'))
        except BadSignatureError:
            return None

    def check_failure(self, replica_failures, source_id, source_message_count, required_type):
        for (i, failure) in enumerate(replica_failures):
            oper = failure.operands
            if ((failure.failure_type == required_type) and (source_id == oper[0]) and (source_message_count == oper[1])):
                return (True, failure)
        return (False, None)

    def output_wrapper(self, log):
        self.output('[{}][TS: {}]'.format(self._state.name, str(time())), log)

    def _Replica_handler_370(self, olympus):
        self._state.status = 2
        self.output_wrapper((self._state.name + ' is immutable and shutting down.'))
    _Replica_handler_370._labels = None
    _Replica_handler_370._notlabels = None

    def _Replica_handler_388(self, olympus_, replicas_, head_, tail_, config_data):
        self._state.olympus = olympus_
        self._state.replicas = replicas_
        self._state.head = head_
        self._state.tail = tail_
        config_data = self.verify_data_with_key(config_data, self._state.olympus_public_key)
        if (config_data is None):
            self.output_wrapper('Verification of message sent by Olympus has failed.')
            return
        (replica_public_keys_, self._state.configuration) = config_data
        self._state.replica_public_keys = [VerifyKey(key, encoder=HexEncoder) for key in replica_public_keys_]
        self.output_wrapper('{} received replica references and public keys from Olympus'.format(self._state.name))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_388._labels = None
    _Replica_handler_388._notlabels = None

    def _Replica_handler_462(self, private_key_, olympus):
        self._state.private_key = private_key_
        self.output_wrapper((self._state.name + ' has receives its private key from Olympus.'))
        self.send(('ACK', self._state.name), to=olympus)
    _Replica_handler_462._labels = None
    _Replica_handler_462._notlabels = None

    def _Replica_handler_489(self, client_id, client_public_key):
        self._state.client_keys[client_id] = VerifyKey(client_public_key, encoder=HexEncoder)
        self.output_wrapper('{} has received client public key: {} for client {}'.format(self._state.name, str(client_public_key), str(client_id)))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_489._labels = None
    _Replica_handler_489._notlabels = None

    def _Replica_handler_527(self, sender_id, type, request_from, client, request_id, client_id, args):
        self.output_wrapper((((((str(type) + ' request with request id ') + str(request_id)) + ' received by ') + self._state.name) + '.'))
        if (self._state.status == 0):
            self.output_wrapper((self._state.name + ' is in PENDING state.'))
        elif (self._state.status == 1):
            self.output_wrapper((self._state.name + ' is in ACTIVE state.'))
        elif (self._state.status == 2):
            self.output_wrapper((self._state.name + ' is in IMMUTABLE state.'))
        if (not (self._state.status == 1)):
            self.output_wrapper('Replica is not in ACTIVE state. Not handling message')
            return
        if (request_from == client):
            if (not (client_id in self._state.messages_received_from_client)):
                self._state.messages_received_from_client[client_id] = 0
            (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_received_from_client[client_id], FailureType.client_request)
            if is_trigger:
                self._state.pending_failures[scenario.action_type] = 1
                self._state.pending_failure_scenarios[scenario.action_type] = scenario
                self.output_wrapper('Replica {}: Trigger client request failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_received_from_client[client_id], self._state.pending_failures))
            self._state.messages_received_from_client[client_id] += 1
            args = self.verify_data_with_key(args, self._state.client_keys[client_id])
            if (args == None):
                self.output_wrapper((('Verification of message sent by Client ' + str(client_id)) + ' has failed.'))
                return
            if (request_id in self._state.result_cache):
                self.sign_and_send(('Operation_result', self._state.result_cache[request_id]), client)
                self.output_wrapper((('Result sent from cache of ' + self._state.name) + '.'))
                return
            elif (not (self._id in self._state.head)):
                self.sign_and_send(('Request', type, self._id, client, request_id, client_id, args), self._state.head)
                super()._label('_st_label_728', block=False)
                _st_label_728 = 0
                self._timer_start()
                while (_st_label_728 == 0):
                    _st_label_728 += 1
                    if PatternExpr_739.match_iter(self._ReplicaReceivedEvent_6, _BoundPattern746_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                        pass
                        _st_label_728 += 1
                    elif self._timer_expired:
                        self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                        _st_label_728 += 1
                    else:
                        super()._label('_st_label_728', block=True, timeout=self._state.replica_timeout)
                        _st_label_728 -= 1
                return
        else:
            args = self.verify_data_with_key(args, self._state.replica_public_keys[sender_id])
            if (args == None):
                self.output_wrapper((('Verification of message sent by Replica ' + str(sender_id)) + ' has failed.'))
                return
        if (self._id in self._state.head):
            if (not (request_from == client)):
                if (not (client_id in self._state.messages_forwarded_request)):
                    self._state.messages_forwarded_request[client_id] = 0
                (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_forwarded_request[client_id], FailureType.forwarded_request)
                if is_trigger:
                    self._state.pending_failures[scenario.action_type] = 1
                    self._state.pending_failure_scenarios[scenario.action_type] = scenario
                    self.output_wrapper('Replica {}: Trigger forwarded request failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_forwarded_request[client_id], scenario))
                self._state.messages_forwarded_request[client_id] += 1
            result = self.update_running_state(type, args)
            self._state.slot_number += 1
            if ((FailureActionType.change_operation in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.change_operation] == 1)):
                stmt_type = 'get'
                stmt_args = ['x']
                self.output_wrapper('Executing failure scenario: {}'.format(str(self._state.pending_failure_scenarios[FailureActionType.change_operation])))
                self._state.pending_failures[FailureActionType.change_operation] = 0
                self._state.pending_failure_scenarios[FailureActionType.change_operation] = None
            else:
                stmt_type = type
                stmt_args = args
            order_stmt = [[self._state.slot_number, (stmt_type, stmt_args), self._state.configuration]]
            self._state.order_proof = [self._state.slot_number, (type, args), self._state.configuration, order_stmt]
            self._state.result_proof = [[(type, args), self.calculate_hash(result)]]
            shuttle = (self._state.order_proof, self._state.result_proof)
            self.sign_and_send(('Request', type, self._id, client, request_id, client_id, shuttle), self._state.replicas.get((self._state.id + 1)))
            self._state.last_slot_number = self._state.slot_number
            super()._label('_st_label_965', block=False)
            _st_label_965 = 0
            self._timer_start()
            while (_st_label_965 == 0):
                _st_label_965 += 1
                if PatternExpr_976.match_iter(self._ReplicaReceivedEvent_7, _BoundPattern983_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                    pass
                    _st_label_965 += 1
                elif self._timer_expired:
                    self.output_wrapper('{} has timed out while waiting for result shuttle for request id {}. Sending reconfiguration request to Olympus'.format(self._state.name, str(request_id)))
                    self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                    _st_label_965 += 1
                else:
                    super()._label('_st_label_965', block=True, timeout=self._state.replica_timeout)
                    _st_label_965 -= 1
        else:
            if (not (client_id in self._state.messages_shuttle)):
                self._state.messages_shuttle[client_id] = 0
            (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_shuttle[client_id], FailureType.shuttle)
            if is_trigger:
                self._state.pending_failures[scenario.action_type] = 1
                self._state.pending_failure_scenarios[scenario.action_type] = scenario
                self.output_wrapper('Replica {}: Trigger shuttle failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_shuttle[client_id], scenario))
            self._state.messages_shuttle[client_id] += 1
            if (not self.validate_shuttle(args)):
                self.output_wrapper('{} failed to validate shuttle for request_id: {}. Triggering reconfiguration'.format(self._state.name, request_id))
                self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                return
            (self._state.order_proof, self._state.result_proof) = args
            (self._state.slot_number, operation, self._state.configuration, order_stmt) = self._state.order_proof
            self._state.last_slot_number = self._state.slot_number
            (type, operation_args) = operation
            result = self.update_running_state(type, operation_args)
            if ((FailureActionType.change_operation in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.change_operation] == 1)):
                self.output_wrapper('Executing failure scenario: {}'.format(str(self._state.pending_failure_scenarios[FailureActionType.change_operation])))
                type = 'get'
                operation_args = ['x']
                self._state.pending_failures[FailureActionType.change_operation] = 0
                self._state.pending_failure_scenarios[FailureActionType.change_operation] = None
            self._state.order_proof[3].append([self._state.slot_number, (type, operation_args), self._state.configuration])
            self._state.result_proof.append([(type, operation_args), self.calculate_hash(result)])
            shuttle = (self._state.order_proof, self._state.result_proof)
            if (self._id in self._state.tail):
                result_shuttle = [result, self._state.result_proof]
                if ((FailureActionType.change_result in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.change_result] == 1)):
                    op_t = result_shuttle[1][self._state.id][0]
                    result_shuttle[1][self._state.id] = [op_t, self.calculate_hash('OK')]
                if ((FailureActionType.drop_result_stmt in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.drop_result_stmt] == 1)):
                    result_t = result_shuttle[0]
                    result_shuttle = [result_t, result_shuttle[1][1:]]
                self.sign_and_send(('Operation_result', request_id, result_shuttle), client)
                self.send(('Operation_result_' + str(request_id)), to=client)
                self.sign_and_send(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.tail)
            else:
                self.sign_and_send(('Request', type, self._id, client, request_id, client_id, shuttle), self._state.replicas.get((self._state.id + 1)))
                super()._label('_st_label_1296', block=False)
                _st_label_1296 = 0
                self._timer_start()
                while (_st_label_1296 == 0):
                    _st_label_1296 += 1
                    if PatternExpr_1307.match_iter(self._ReplicaReceivedEvent_8, _BoundPattern1314_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                        pass
                        _st_label_1296 += 1
                    elif self._timer_expired:
                        self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                        _st_label_1296 += 1
                    else:
                        super()._label('_st_label_1296', block=True, timeout=self._state.replica_timeout)
                        _st_label_1296 -= 1
    _Replica_handler_527._labels = None
    _Replica_handler_527._notlabels = None

    def _Replica_handler_1330(self, sender_id, request_from, request_id, client_id, result_shuttle):
        if (not (client_id in self._state.messages_result_shuttle)):
            self._state.messages_result_shuttle[client_id] = 0
        (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_result_shuttle[client_id], FailureType.result_shuttle)
        if is_trigger:
            self._state.pending_failures[scenario.action_type] = 1
            self._state.pending_failure_scenarios[scenario.action_type] = scenario
            self.output_wrapper('{}: Trigger result shuttle failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_result_shuttle[client_id], scenario))
        self._state.messages_result_shuttle[client_id] += 1
        result_shuttle = self.verify_data_with_key(result_shuttle, self._state.replica_public_keys[sender_id])
        if (result_shuttle == None):
            self.output_wrapper((('Verification of message sent by Replica ' + str(sender_id)) + ' has failed.'))
            return
        if self.validate_result_shuttle(result_shuttle):
            self._state.result_cache[request_id] = result_shuttle
            if (not (self._id in self._state.head)):
                if ((FailureActionType.change_result in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.change_result] == 1)):
                    self.output_wrapper('Executing failure scenario: {}'.format(str(self._state.pending_failure_scenarios[FailureActionType.change_result])))
                    op_t = result_shuttle[1][self._state.id][0]
                    result_shuttle[1][self._state.id] = [op_t, self.calculate_hash('OK')]
                    self._state.pending_failures[FailureActionType.change_result] = 0
                    self._state.pending_failure_scenarios[FailureActionType.change_result] = None
                if ((FailureActionType.drop_result_stmt in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.drop_result_stmt] == 1)):
                    self.output_wrapper('Executing failure scenario: {}'.format(str(self._state.pending_failure_scenarios[FailureActionType.drop_result_stmt])))
                    result_t = result_shuttle[0]
                    result_shuttle = [result_t, result_shuttle[1][1:]]
                    self._state.pending_failures[FailureActionType.drop_result_stmt] = 0
                    self._state.pending_failure_scenarios[FailureActionType.drop_result_stmt] = None
                self.sign_and_send(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.replicas.get((self._state.id - 1)))
                self.send(('Result_shuttle_' + str(request_id)), to=self._state.replicas.get((self._state.id - 1)))
            self.output_wrapper((('Result shuttle is at ' + str(self._state.name)) + '.'))
        else:
            self.output_wrapper((('Result shuttle sent by Replica ' + str(sender_id)) + ' is not valid.'))
            self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
    _Replica_handler_1330._labels = None
    _Replica_handler_1330._notlabels = None

    def _Replica_handler_1606(self, source):
        self._state.status = 2
        self.output_wrapper('Received wedge request from Olympus')
        self.send(('wedge', [(1, 'op1'), (2, 'op2')], ['checkpoint proof'], 'hash_running_state', self._id, time()), to=self._state.olympus)
    _Replica_handler_1606._labels = None
    _Replica_handler_1606._notlabels = None
