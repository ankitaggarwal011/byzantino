# -*- generated by 1.0.9 -*-
import da
PatternExpr_360 = da.pat.ConstantPattern('Shutdown')
PatternExpr_364 = da.pat.BoundPattern('_BoundPattern365_')
PatternExpr_378 = da.pat.ConstantPattern('Immutable')
PatternExpr_382 = da.pat.FreePattern('olympus')
PatternExpr_396 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.FreePattern('olympus_'), da.pat.FreePattern('replicas_'), da.pat.FreePattern('head_'), da.pat.FreePattern('tail_'), da.pat.FreePattern('config_data')])
PatternExpr_470 = da.pat.TuplePattern([da.pat.ConstantPattern('Key'), da.pat.FreePattern('private_key_')])
PatternExpr_477 = da.pat.FreePattern('olympus')
PatternExpr_497 = da.pat.TuplePattern([da.pat.ConstantPattern('Client_keys'), da.pat.FreePattern('client_id'), da.pat.FreePattern('client_public_key')])
PatternExpr_535 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Request'), da.pat.FreePattern('type'), da.pat.FreePattern('request_from'), da.pat.FreePattern('client'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('args')])
PatternExpr_800 = da.pat.BoundPattern('_BoundPattern806_')
PatternExpr_1085 = da.pat.BoundPattern('_BoundPattern1091_')
PatternExpr_1448 = da.pat.BoundPattern('_BoundPattern1454_')
PatternExpr_1482 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Result_shuttle'), da.pat.FreePattern('request_from'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('result_shuttle')])
PatternExpr_1774 = da.pat.ConstantPattern('wedge_request')
PatternExpr_1778 = da.pat.FreePattern('olympus')
PatternExpr_1797 = da.pat.TuplePattern([da.pat.ConstantPattern('catch_up'), da.pat.FreePattern('gap')])
PatternExpr_1804 = da.pat.FreePattern('olympus')
PatternExpr_1836 = da.pat.ConstantPattern('get_running_state')
PatternExpr_1840 = da.pat.FreePattern('olympus')
PatternExpr_366 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern372_')]), da.pat.ConstantPattern('Shutdown')])
PatternExpr_808 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern815_')])
PatternExpr_1093 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern1100_')])
PatternExpr_1456 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern1463_')])
_config_object = {}
from nacl.hash import sha256
from nacl.encoding import HexEncoder
from nacl.signing import SigningKey, VerifyKey
from nacl.exceptions import BadSignatureError
from ast import literal_eval
from time import time
from config import *
import read_config

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_6 = []
        self._ReplicaReceivedEvent_7 = []
        self._ReplicaReceivedEvent_8 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_360, sources=[PatternExpr_364], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_378, sources=[PatternExpr_382], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_377]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_396, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_395]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_470, sources=[PatternExpr_477], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_469]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_497, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_496]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_5', PatternExpr_535, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_534]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_6', PatternExpr_800, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_7', PatternExpr_1085, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_8', PatternExpr_1448, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_9', PatternExpr_1482, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1481]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_10', PatternExpr_1774, sources=[PatternExpr_1778], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1773]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_11', PatternExpr_1797, sources=[PatternExpr_1804], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1796]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_12', PatternExpr_1836, sources=[PatternExpr_1840], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1835])])

    def setup(self, id, name, running_state, replica_failures, replica_timeout, olympus_public_key, **rest_2250):
        super().setup(id=id, name=name, running_state=running_state, replica_failures=replica_failures, replica_timeout=replica_timeout, olympus_public_key=olympus_public_key, **rest_2250)
        self._state.id = id
        self._state.name = name
        self._state.running_state = running_state
        self._state.replica_failures = replica_failures
        self._state.replica_timeout = replica_timeout
        self._state.olympus_public_key = olympus_public_key
        self.output_wrapper(('replica failures: ' + str(self._state.replica_failures)))
        self._state.status = 0
        self._state.order_proof = list()
        self._state.result_proof = list()
        self._state.result_cache = dict()
        self._state.slot_number = 0
        self._state.last_slot_number = 0
        self._state.olympus = None
        self._state.replicas = None
        self._state.head = None
        self._state.tail = None
        self._state.replica_public_keys = None
        self._state.private_key = None
        self._state.client_keys = dict()
        self._state.configuration = None
        self._state.pending_failures = {}
        self._state.pending_failure_scenarios = {}
        self._state.messages_received_from_client = {}
        self._state.messages_shuttle = {}
        self._state.messages_result_shuttle = {}
        self._state.messages_forwarded_request = {}
        self._state.ongoing_request_id = None
        self._state.history = list()

    def run(self):
        self._state.status = 1
        self._state.olympus_public_key = VerifyKey(self._state.olympus_public_key, encoder=HexEncoder)
        super()._label('_st_label_357', block=False)
        _st_label_357 = 0
        while (_st_label_357 == 0):
            _st_label_357 += 1
            if PatternExpr_366.match_iter(self._ReplicaReceivedEvent_0, _BoundPattern372_=self._state.olympus, SELF_ID=self._id):
                _st_label_357 += 1
            else:
                super()._label('_st_label_357', block=True)
                _st_label_357 -= 1

    def update_running_state(self, type, args):
        if (type == 'put'):
            if (len(args) > 1):
                self._state.running_state[args[0]] = args[1]
            return 'OK'
        elif (type == 'get'):
            if (len(args) > 0):
                if (args[0] in self._state.running_state):
                    return self._state.running_state[args[0]]
                else:
                    return ''
        elif (type == 'slice'):
            if (len(args) > 1):
                (lower, upper) = map(int, args[1].split(':'))
                if ((args[0] in self._state.running_state) and (lower >= 0) and (upper <= len(self._state.running_state[args[0]]))):
                    self._state.running_state[args[0]] = self._state.running_state[args[0]][lower:upper]
                    return self._state.running_state[args[0]]
                else:
                    return 'fail'
        elif (type == 'append'):
            if (len(args) > 1):
                if (args[0] in self._state.running_state):
                    self._state.running_state[args[0]] = (self._state.running_state[args[0]] + args[1])
                    return 'OK'
                else:
                    return 'fail'

    def calculate_hash(self, val):
        if isinstance(val, str):
            return sha256(str.encode(val), encoder=HexEncoder)
        elif isinstance(val, dict):
            return sha256(str.encode(str(val)), encoder=HexEncoder)
        return sha256(val, encoder=HexEncoder)

    def validate_shuttle(self, shuttle):
        (self._state.order_proof, self._state.result_proof) = shuttle
        (self._state.slot_number, operation, self._state.configuration, order_stmt) = self._state.order_proof
        if (not (self._state.last_slot_number == (self._state.slot_number - 1))):
            return False
        for stmt in order_stmt:
            if ((not (stmt[0] == self._state.slot_number)) or (not (stmt[1] == operation)) or (not (stmt[2] == self._state.configuration))):
                return False
        return True

    def validate_result_shuttle(self, result_shuttle):
        (result, self._state.result_proof) = result_shuttle
        if (not (len(self._state.result_proof) == len(self._state.replicas))):
            return False
        hash = self.calculate_hash(result)
        for i in self._state.result_proof:
            if (not (hash == i[1])):
                return False
        return True

    def sign_and_send(self, data, to_):
        data = ([self._state.id] + list(data))
        data[(- 1)] = self._state.private_key.sign(str(data[(- 1)]).encode('utf-8'))
        self.send(tuple(data), to=to_)

    def verify_data_with_key(self, data, pub_key):
        try:
            pub_key.verify(data)
            return literal_eval(data.message.decode('utf-8'))
        except BadSignatureError:
            return None

    def check_failure(self, replica_failures, source_id, source_message_count, required_type):
        for (i, failure) in enumerate(replica_failures):
            oper = failure.operands
            if ((failure.failure_type == required_type) and (source_id == oper[0]) and (source_message_count == oper[1])):
                return (True, failure)
        return (False, None)

    def output_wrapper(self, log):
        self.output('[{}][TS: {}]'.format(self._state.name, str(time())), log)

    def _Replica_handler_377(self, olympus):
        self._state.status = 2
        self.output_wrapper((self._state.name + ' is now immutable.'))
    _Replica_handler_377._labels = None
    _Replica_handler_377._notlabels = None

    def _Replica_handler_395(self, olympus_, replicas_, head_, tail_, config_data):
        self._state.olympus = olympus_
        self._state.replicas = replicas_
        self._state.head = head_
        self._state.tail = tail_
        config_data = self.verify_data_with_key(config_data, self._state.olympus_public_key)
        if (config_data is None):
            self.output_wrapper('Verification of message sent by Olympus has failed.')
            return
        (replica_public_keys_, self._state.configuration) = config_data
        self._state.replica_public_keys = [VerifyKey(key, encoder=HexEncoder) for key in replica_public_keys_]
        self.output_wrapper('{} received replica references and public keys from Olympus'.format(self._state.name))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_395._labels = None
    _Replica_handler_395._notlabels = None

    def _Replica_handler_469(self, private_key_, olympus):
        self._state.private_key = private_key_
        self.output_wrapper((self._state.name + ' has receives its private key from Olympus.'))
        self.send(('ACK', self._state.name), to=olympus)
    _Replica_handler_469._labels = None
    _Replica_handler_469._notlabels = None

    def _Replica_handler_496(self, client_id, client_public_key):
        self._state.client_keys[client_id] = VerifyKey(client_public_key, encoder=HexEncoder)
        self.output_wrapper('{} has received client public key: {} for client {}'.format(self._state.name, str(client_public_key), str(client_id)))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_496._labels = None
    _Replica_handler_496._notlabels = None

    def _Replica_handler_534(self, sender_id, type, request_from, client, request_id, client_id, args):
        self.output_wrapper((((((str(type) + ' request with request id ') + str(request_id)) + ' received by ') + self._state.name) + '.'))
        if (self._state.status == 0):
            self.output_wrapper((self._state.name + ' is in PENDING state.'))
        elif (self._state.status == 1):
            self.output_wrapper((self._state.name + ' is in ACTIVE state.'))
        elif (self._state.status == 2):
            self.output_wrapper((self._state.name + ' is in IMMUTABLE state.'))
        if (not (self._state.status == 1)):
            self.output_wrapper('Replica is not in ACTIVE state. Not handling any messages.')
            if ((request_from == client) and (self._state.status == 2)):
                self.output_wrapper('Sending ERROR message to the client')
                self.send((self._state.id, 'Operation_result', request_id, 'ERROR'), to=client)
                self.send(('Operation_result_' + str(request_id)), to=client)
            return
        if (self._state.ongoing_request_id == request_id):
            self.output_wrapper((('Request with id ' + str(request_id)) + ' is already running.'))
            return
        self._state.ongoing_request_id = request_id
        if (request_from == client):
            if (not (client_id in self._state.messages_received_from_client)):
                self._state.messages_received_from_client[client_id] = 0
            (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_received_from_client[client_id], FailureType.client_request)
            if is_trigger:
                self._state.pending_failures[scenario.action_type] = 1
                self._state.pending_failure_scenarios[scenario.action_type] = scenario
                self.output_wrapper('Replica {}: Trigger client request failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_received_from_client[client_id], self._state.pending_failures))
            self._state.messages_received_from_client[client_id] += 1
            args = self.verify_data_with_key(args, self._state.client_keys[client_id])
            if (args == None):
                self.output_wrapper((('Verification of message sent by Client ' + str(client_id)) + ' has failed.'))
                return
            if (request_id in self._state.result_cache):
                self.sign_and_send(('Operation_result', self._state.result_cache[request_id]), client)
                self.output_wrapper((('Result sent from cache of ' + self._state.name) + '.'))
                return
            elif ((isinstance(self._state.head, set) and (not (self._id in self._state.head))) or ((not isinstance(self._state.head, set)) and (not (self._id == self._state.head)))):
                self.sign_and_send(('Request', type, self._id, client, request_id, client_id, args), self._state.head)
                super()._label('_st_label_797', block=False)
                _st_label_797 = 0
                self._timer_start()
                while (_st_label_797 == 0):
                    _st_label_797 += 1
                    if PatternExpr_808.match_iter(self._ReplicaReceivedEvent_6, _BoundPattern815_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                        self._state.ongoing_request_id = None
                        _st_label_797 += 1
                    elif self._timer_expired:
                        self.send(('Reconfiguration', self._state.name, self._state.configuration), to=self._state.olympus)
                        _st_label_797 += 1
                    else:
                        super()._label('_st_label_797', block=True, timeout=self._state.replica_timeout)
                        _st_label_797 -= 1
                return
        else:
            args = self.verify_data_with_key(args, self._state.replica_public_keys[sender_id])
            if (args == None):
                self.output_wrapper((('Verification of message sent by Replica ' + str(sender_id)) + ' has failed.'))
                return
        if ((isinstance(self._state.head, set) and (self._id in self._state.head)) or ((not isinstance(self._state.head, set)) and (self._id == self._state.head))):
            if ((isinstance(request_from, set) and (not (client in request_from))) or ((not isinstance(request_from, set)) and (not (request_from == client)))):
                if (not (client_id in self._state.messages_forwarded_request)):
                    self._state.messages_forwarded_request[client_id] = 0
                (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_forwarded_request[client_id], FailureType.forwarded_request)
                if is_trigger:
                    self._state.pending_failures[scenario.action_type] = 1
                    self._state.pending_failure_scenarios[scenario.action_type] = scenario
                    self.output_wrapper('Replica {}: Trigger forwarded request failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_forwarded_request[client_id], scenario))
                self._state.messages_forwarded_request[client_id] += 1
            result = self.update_running_state(type, args)
            self._state.slot_number += 1
            if ((FailureActionType.change_operation in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.change_operation] == 1)):
                stmt_type = 'get'
                stmt_args = ['x']
                self.output_wrapper('Executing failure scenario: {}'.format(str(self._state.pending_failure_scenarios[FailureActionType.change_operation])))
                self._state.pending_failures[FailureActionType.change_operation] = 0
                self._state.pending_failure_scenarios[FailureActionType.change_operation] = None
            else:
                stmt_type = type
                stmt_args = args
            order_stmt = [[self._state.slot_number, (stmt_type, stmt_args), self._state.configuration]]
            self._state.order_proof = [self._state.slot_number, (type, args), self._state.configuration, order_stmt]
            self._state.result_proof = [[(type, args), self.calculate_hash(result)]]
            shuttle = (self._state.order_proof, self._state.result_proof)
            self._state.history.append(self._state.order_proof)
            self.output_wrapper((('Shuttle sent from ' + str(self._state.name)) + ' to next replica.'))
            self.sign_and_send(('Request', type, self._id, client, request_id, client_id, shuttle), self._state.replicas.get((self._state.id + 1)))
            self._state.last_slot_number = self._state.slot_number
            super()._label('_st_label_1082', block=False)
            _st_label_1082 = 0
            self._timer_start()
            while (_st_label_1082 == 0):
                _st_label_1082 += 1
                if PatternExpr_1093.match_iter(self._ReplicaReceivedEvent_7, _BoundPattern1100_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                    self._state.ongoing_request_id = None
                    _st_label_1082 += 1
                elif self._timer_expired:
                    self.output_wrapper('{} has timed out while waiting for result shuttle for request id {}. Sending reconfiguration request to Olympus'.format(self._state.name, str(request_id)))
                    self.send(('Reconfiguration', self._state.name, self._state.configuration), to=self._state.olympus)
                    _st_label_1082 += 1
                else:
                    super()._label('_st_label_1082', block=True, timeout=self._state.replica_timeout)
                    _st_label_1082 -= 1
        else:
            if (not (client_id in self._state.messages_shuttle)):
                self._state.messages_shuttle[client_id] = 0
            (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_shuttle[client_id], FailureType.shuttle)
            if is_trigger:
                self._state.pending_failures[scenario.action_type] = 1
                self._state.pending_failure_scenarios[scenario.action_type] = scenario
                self.output_wrapper('Replica {}: Trigger shuttle failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_shuttle[client_id], scenario))
            self._state.messages_shuttle[client_id] += 1
            if (not self.validate_shuttle(args)):
                self.output_wrapper('{} failed to validate shuttle for request_id: {}. Triggering reconfiguration'.format(self._state.name, request_id))
                self.send(('Reconfiguration', self._state.name, self._state.configuration), to=self._state.olympus)
                return
            (self._state.order_proof, self._state.result_proof) = args
            (self._state.slot_number, operation, self._state.configuration, order_stmt) = self._state.order_proof
            self._state.last_slot_number = self._state.slot_number
            (type, operation_args) = operation
            result = self.update_running_state(type, operation_args)
            if ((FailureActionType.change_operation in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.change_operation] == 1)):
                self.output_wrapper('Executing failure scenario: {}'.format(str(self._state.pending_failure_scenarios[FailureActionType.change_operation])))
                type = 'get'
                operation_args = ['x']
                self._state.pending_failures[FailureActionType.change_operation] = 0
                self._state.pending_failure_scenarios[FailureActionType.change_operation] = None
            self._state.order_proof[3].append([self._state.slot_number, (type, operation_args), self._state.configuration])
            self._state.result_proof.append([(type, operation_args), self.calculate_hash(result)])
            shuttle = (self._state.order_proof, self._state.result_proof)
            self._state.history.append(self._state.order_proof)
            if ((isinstance(self._state.tail, set) and (self._id in self._state.tail)) or ((not isinstance(self._state.tail, set)) and (self._id == self._state.tail))):
                result_shuttle = [result, self._state.result_proof]
                if ((FailureActionType.change_result in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.change_result] == 1)):
                    op_t = result_shuttle[1][self._state.id][0]
                    result_shuttle[1][self._state.id] = [op_t, self.calculate_hash('OK')]
                if ((FailureActionType.drop_result_stmt in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.drop_result_stmt] == 1)):
                    result_t = result_shuttle[0]
                    result_shuttle = [result_t, result_shuttle[1][1:]]
                self.sign_and_send(('Operation_result', request_id, result_shuttle), client)
                self.send(('Operation_result_' + str(request_id)), to=client)
                self.sign_and_send(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.tail)
            else:
                self.output_wrapper((('Shuttle sent from ' + str(self._state.name)) + ' to next replica.'))
                self.sign_and_send(('Request', type, self._id, client, request_id, client_id, shuttle), self._state.replicas.get((self._state.id + 1)))
                super()._label('_st_label_1445', block=False)
                _st_label_1445 = 0
                self._timer_start()
                while (_st_label_1445 == 0):
                    _st_label_1445 += 1
                    if PatternExpr_1456.match_iter(self._ReplicaReceivedEvent_8, _BoundPattern1463_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                        self._state.ongoing_request_id = None
                        _st_label_1445 += 1
                    elif self._timer_expired:
                        self.send(('Reconfiguration', self._state.name, self._state.configuration), to=self._state.olympus)
                        _st_label_1445 += 1
                    else:
                        super()._label('_st_label_1445', block=True, timeout=self._state.replica_timeout)
                        _st_label_1445 -= 1
    _Replica_handler_534._labels = None
    _Replica_handler_534._notlabels = None

    def _Replica_handler_1481(self, sender_id, request_from, request_id, client_id, result_shuttle):
        if (not (client_id in self._state.messages_result_shuttle)):
            self._state.messages_result_shuttle[client_id] = 0
        (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_result_shuttle[client_id], FailureType.result_shuttle)
        if is_trigger:
            self._state.pending_failures[scenario.action_type] = 1
            self._state.pending_failure_scenarios[scenario.action_type] = scenario
            self.output_wrapper('{}: Trigger result shuttle failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_result_shuttle[client_id], scenario))
        self._state.messages_result_shuttle[client_id] += 1
        result_shuttle = self.verify_data_with_key(result_shuttle, self._state.replica_public_keys[sender_id])
        if (result_shuttle == None):
            self.output_wrapper((('Verification of message sent by Replica ' + str(sender_id)) + ' has failed.'))
            return
        if self.validate_result_shuttle(result_shuttle):
            self._state.result_cache[request_id] = result_shuttle
            if ((isinstance(self._state.head, set) and (not (self._id in self._state.head))) or ((not isinstance(self._state.head, set)) and (not (self._id == self._state.head)))):
                if ((FailureActionType.change_result in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.change_result] == 1)):
                    self.output_wrapper('Executing failure scenario: {}'.format(str(self._state.pending_failure_scenarios[FailureActionType.change_result])))
                    op_t = result_shuttle[1][self._state.id][0]
                    result_shuttle[1][self._state.id] = [op_t, self.calculate_hash('OK')]
                    self._state.pending_failures[FailureActionType.change_result] = 0
                    self._state.pending_failure_scenarios[FailureActionType.change_result] = None
                if ((FailureActionType.drop_result_stmt in self._state.pending_failures) and (self._state.pending_failures[FailureActionType.drop_result_stmt] == 1)):
                    self.output_wrapper('Executing failure scenario: {}'.format(str(self._state.pending_failure_scenarios[FailureActionType.drop_result_stmt])))
                    result_t = result_shuttle[0]
                    result_shuttle = [result_t, result_shuttle[1][1:]]
                    self._state.pending_failures[FailureActionType.drop_result_stmt] = 0
                    self._state.pending_failure_scenarios[FailureActionType.drop_result_stmt] = None
                self.sign_and_send(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.replicas.get((self._state.id - 1)))
                self.send(('Result_shuttle_' + str(request_id)), to=self._state.replicas.get((self._state.id - 1)))
            self.output_wrapper((('Result shuttle is at ' + str(self._state.name)) + '.'))
        else:
            self.output_wrapper((('Result shuttle sent by Replica ' + str(sender_id)) + ' is not valid.'))
            self.send(('Reconfiguration', self._state.name, self._state.configuration), to=self._state.olympus)
    _Replica_handler_1481._labels = None
    _Replica_handler_1481._notlabels = None

    def _Replica_handler_1773(self, olympus):
        self._state.status = 2
        self.output_wrapper('Received wedge request from Olympus')
        self.send(('wedge', self._state.history, self._state.id), to=olympus)
    _Replica_handler_1773._labels = None
    _Replica_handler_1773._notlabels = None

    def _Replica_handler_1796(self, gap, olympus):
        for op_to_apply in gap:
            self.update_running_state(op_to_apply[1][0], op_to_apply[1][1])
        self.send(('caught_up', self.calculate_hash(self._state.running_state), self._state.id), to=olympus)
    _Replica_handler_1796._labels = None
    _Replica_handler_1796._notlabels = None

    def _Replica_handler_1835(self, olympus):
        self.output_wrapper((('Response to get_running_state sent to Olympus by ' + str(self._state.name)) + '.'))
        self.send(('response_get_running_state', self._state.id, self._state.running_state), to=olympus)
    _Replica_handler_1835._labels = None
    _Replica_handler_1835._notlabels = None
