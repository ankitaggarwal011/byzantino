# -*- generated by 1.0.9 -*-
import da
PatternExpr_341 = da.pat.ConstantPattern('Shutdown')
PatternExpr_345 = da.pat.BoundPattern('_BoundPattern346_')
PatternExpr_359 = da.pat.ConstantPattern('Shutdown')
PatternExpr_363 = da.pat.FreePattern('olympus')
PatternExpr_375 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.FreePattern('olympus_'), da.pat.FreePattern('replicas_'), da.pat.FreePattern('head_'), da.pat.FreePattern('tail_'), da.pat.FreePattern('replica_public_keys_'), da.pat.FreePattern('config_number')])
PatternExpr_430 = da.pat.TuplePattern([da.pat.ConstantPattern('Key'), da.pat.FreePattern('private_key_')])
PatternExpr_452 = da.pat.TuplePattern([da.pat.ConstantPattern('Client_keys'), da.pat.FreePattern('client_id'), da.pat.FreePattern('client_public_key')])
PatternExpr_477 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Request'), da.pat.FreePattern('type'), da.pat.FreePattern('request_from'), da.pat.FreePattern('client'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('args')])
PatternExpr_656 = da.pat.BoundPattern('_BoundPattern662_')
PatternExpr_807 = da.pat.BoundPattern('_BoundPattern813_')
PatternExpr_966 = da.pat.BoundPattern('_BoundPattern972_')
PatternExpr_1005 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Result_shuttle'), da.pat.FreePattern('request_from'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('result_shuttle')])
PatternExpr_347 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern353_')]), da.pat.ConstantPattern('Shutdown')])
PatternExpr_664 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern671_')])
PatternExpr_815 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern822_')])
PatternExpr_974 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern981_')])
PatternExpr_1653 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.FreePattern('sender')])
PatternExpr_1670 = da.pat.TuplePattern([da.pat.ConstantPattern('Get_configuration'), da.pat.FreePattern('client'), da.pat.FreePattern('client_name'), da.pat.FreePattern('client_id'), da.pat.FreePattern('client_public_key')])
PatternExpr_1713 = da.pat.TuplePattern([da.pat.ConstantPattern('Reconfiguration'), da.pat.FreePattern('sender'), da.pat.FreePattern('proof_of_misbehavior')])
PatternExpr_1769 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])
PatternExpr_1792 = da.pat.ConstantPattern('Shutdown')
PatternExpr_1776 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])])
PatternExpr_1796 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.ConstantPattern('Shutdown')])
PatternExpr_1872 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.FreePattern('replicas_'), da.pat.FreePattern('head_')])
PatternExpr_1881 = da.pat.FreePattern('olympus')
PatternExpr_1902 = da.pat.TuplePattern([da.pat.ConstantPattern('Keys'), da.pat.FreePattern('replica_public_keys_')])
PatternExpr_1909 = da.pat.FreePattern('olympus')
PatternExpr_1935 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Operation_result'), da.pat.FreePattern('result_shuttle')])
PatternExpr_2015 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.BoundPattern('_BoundPattern2018_'), da.pat.BoundPattern('_BoundPattern2019_')])
PatternExpr_2072 = da.pat.BoundPattern('_BoundPattern2078_')
PatternExpr_2111 = da.pat.ConstantPattern('Shutdown')
PatternExpr_2022 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.BoundPattern('_BoundPattern2032_'), da.pat.BoundPattern('_BoundPattern2033_')])])
PatternExpr_2080 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern2087_')])
PatternExpr_2115 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.ConstantPattern('Shutdown')])
_config_object = {'channel': {'reliable', 'fifo'}}
from nacl.hash import sha256
from nacl.encoding import HexEncoder
from nacl.signing import SigningKey, VerifyKey
from nacl.exceptions import BadSignatureError
from ast import literal_eval
from config import *
import read_config
import sys
import getopt
client_running_state = dict()

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_6 = []
        self._ReplicaReceivedEvent_7 = []
        self._ReplicaReceivedEvent_8 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_341, sources=[PatternExpr_345], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_359, sources=[PatternExpr_363], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_358]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_375, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_374]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_430, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_429]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_452, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_451]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_5', PatternExpr_477, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_476]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_6', PatternExpr_656, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_7', PatternExpr_807, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_8', PatternExpr_966, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_9', PatternExpr_1005, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1004])])

    def setup(self, id, name, replica_failures, replica_timeout, **rest_2564):
        super().setup(id=id, name=name, replica_failures=replica_failures, replica_timeout=replica_timeout, **rest_2564)
        self._state.id = id
        self._state.name = name
        self._state.replica_failures = replica_failures
        self._state.replica_timeout = replica_timeout
        self.output(('replica failures: ' + str(self._state.replica_failures)))
        self._state.status = 0
        self._state.running_state = dict()
        self._state.order_proof = list()
        self._state.result_proof = list()
        self._state.result_cache = dict()
        self._state.slot_number = 0
        self._state.last_slot_number = 0
        self._state.olympus = None
        self._state.replicas = None
        self._state.head = None
        self._state.tail = None
        self._state.replica_public_keys = None
        self._state.private_key = None
        self._state.client_keys = dict()
        self._state.configuration = None
        self._state.messages_received_from_client = {}
        self._state.messages_shuttle = {}
        self._state.messages_result_shuttle = {}
        self._state.messages_forwarded_request = {}

    def run(self):
        self._state.status = 1
        super()._label('_st_label_338', block=False)
        _st_label_338 = 0
        while (_st_label_338 == 0):
            _st_label_338 += 1
            if PatternExpr_347.match_iter(self._ReplicaReceivedEvent_0, _BoundPattern353_=self._state.olympus, SELF_ID=self._id):
                _st_label_338 += 1
            else:
                super()._label('_st_label_338', block=True)
                _st_label_338 -= 1

    def update_running_state(self, type, args):
        if (type == 'put'):
            if (len(args) > 1):
                self._state.running_state[args[0]] = args[1]
            return 'OK'
        elif (type == 'get'):
            if (len(args) > 0):
                if (args[0] in self._state.running_state):
                    return self._state.running_state[args[0]]
                else:
                    return ''
        elif (type == 'slice'):
            if (len(args) > 1):
                if ((args[0] in self._state.running_state) and (args[1] <= len(self._state.running_state[args[0]]))):
                    self._state.running_state[args[0]] = self._state.running_state[args[0]][int(args[1]):]
                    return self._state.running_state[args[0]]
                else:
                    return 'fail'
        elif (type == 'append'):
            if (len(args) > 1):
                if (args[0] in self._state.running_state):
                    self._state.running_state[args[0]] = (self._state.running_state[args[0]] + args[1])
                    return 'OK'
                else:
                    return 'fail'

    def calculate_hash(self, val):
        if isinstance(val, str):
            return sha256(str.encode(val), encoder=HexEncoder)
        return sha256(val, encoder=HexEncoder)

    def validate_shuttle(self, shuttle):
        (self._state.order_proof, self._state.result_proof) = shuttle
        (self._state.slot_number, operation, self._state.configuration, order_stmt) = self._state.order_proof
        if (not (self._state.last_slot_number == (self._state.slot_number - 1))):
            return False
        for stmt in order_stmt:
            if ((not (stmt[0] == self._state.slot_number)) or (not (stmt[1] == operation)) or (not (stmt[2] == self._state.configuration))):
                return False
        hash = self._state.result_proof[0][1]
        for result_stmt in self._state.result_proof:
            if ((not (result_stmt[0] == operation)) or (not (result_stmt[1] == hash))):
                return False
        return True

    def validate_result_shuttle(self, result_shuttle):
        (result, self._state.result_proof) = result_shuttle
        hash = self.calculate_hash(result)
        for i in self._state.result_proof:
            if (not (hash == i[1])):
                return False
        return True

    def sign_and_send(self, data, to_):
        data = ([self._state.id] + list(data))
        data[(- 1)] = self._state.private_key.sign(str(data[(- 1)]).encode('utf-8'))
        self.send(tuple(data), to=to_)

    def is_client_request_failure(self, replica_failures, client_id, client_message_count):
        for (i, failure) in enumerate(replica_failures):
            oper = failure.operands
            if ((failure.failure_type == FailureType.client_request) and (client_id == oper[0]) and (client_message_count == oper[1])):
                return (True, failure)
        return (False, None)

    def _Replica_handler_358(self, olympus):
        self._state.status = 2
        self.output((self._state.name + ' is immutable and shutting down.'))
    _Replica_handler_358._labels = None
    _Replica_handler_358._notlabels = None

    def _Replica_handler_374(self, olympus_, replicas_, head_, tail_, replica_public_keys_, config_number):
        self._state.olympus = olympus_
        self._state.replicas = replicas_
        self._state.head = head_
        self._state.tail = tail_
        self._state.replica_public_keys = [VerifyKey(key, encoder=HexEncoder) for key in replica_public_keys_]
        self._state.configuration = config_number
        self.output((self._state.name + ' is configured.'))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_374._labels = None
    _Replica_handler_374._notlabels = None

    def _Replica_handler_429(self, private_key_):
        self._state.private_key = private_key_
        self.output((self._state.name + ' have received its private key from Olympus.'))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_429._labels = None
    _Replica_handler_429._notlabels = None

    def _Replica_handler_451(self, client_id, client_public_key):
        self._state.client_keys[client_id] = VerifyKey(client_public_key, encoder=HexEncoder)
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_451._labels = None
    _Replica_handler_451._notlabels = None

    def _Replica_handler_476(self, sender_id, type, request_from, client, request_id, client_id, args):
        self.output((((((str(type) + ' request with request id ') + str(request_id)) + ' received by ') + self._state.name) + '.'))
        if (self._state.status == 0):
            self.output((self._state.name + ' is in PENDING state.'))
        elif (self._state.status == 1):
            self.output((self._state.name + ' is in ACTIVE state.'))
        elif (self._state.status == 2):
            self.output((self._state.name + ' is in IMMUTABLE state.'))
        if (self._state.status == 1):
            if (request_from == client):
                if (not (client_id in self._state.messages_received_from_client)):
                    self._state.messages_received_from_client[client_id] = 0
                (is_trigger, scenario) = self.is_client_request_failure(self._state.replica_failures, client_id, self._state.messages_received_from_client[client_id])
                if is_trigger:
                    current_failure_scenario = scenario
                    self.output('Replica {}: Trigger client request failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_received_from_client[client_id], current_failure_scenario))
                self._state.messages_received_from_client[client_id] += 1
                try:
                    self._state.client_keys[client_id].verify(args)
                    args = literal_eval(args.message.decode('utf-8'))
                except BadSignatureError:
                    self.output((('Verification of message sent by Client ' + str(client_id)) + ' has failed.'))
                    return
                if (request_id in self._state.result_cache):
                    self.sign_and_send(('Operation_result', self._state.result_cache[request_id]), client)
                    self.output((('Result sent from cache of ' + self._state.name) + '.'))
                    return
                elif (not (self._id == self._state.head)):
                    self.sign_and_send(('Request', type, self._id, client, request_id, client_id, args), self._state.head)
                    super()._label('_st_label_653', block=False)
                    _st_label_653 = 0
                    self._timer_start()
                    while (_st_label_653 == 0):
                        _st_label_653 += 1
                        if PatternExpr_664.match_iter(self._ReplicaReceivedEvent_6, _BoundPattern671_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                            pass
                            _st_label_653 += 1
                        elif self._timer_expired:
                            self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                            _st_label_653 += 1
                        else:
                            super()._label('_st_label_653', block=True, timeout=self._state.replica_timeout)
                            _st_label_653 -= 1
                    return
            else:
                try:
                    self._state.replica_public_keys[sender_id].verify(args)
                    args = literal_eval(args.message.decode('utf-8'))
                except BadSignatureError:
                    self.output((('Verification of message sent by Replica ' + str(sender_id)) + ' has failed.'))
                    return
            if (self._id == self._state.head):
                if (not (request_from == client)):
                    if (not (client_id in messages_forwared_request)):
                        messages_forwared_request[client_id] = 0
                    messages_forwared_request[client_id] += 1
                result = self.update_running_state(type, args)
                self._state.slot_number += 1
                order_stmt = [[self._state.slot_number, (type, args), self._state.configuration]]
                self._state.order_proof = [self._state.slot_number, (type, args), self._state.configuration, order_stmt]
                self._state.result_proof = [[(type, args), self.calculate_hash(result)]]
                shuttle = (self._state.order_proof, self._state.result_proof)
                self.sign_and_send(('Request', type, self._id, client, request_id, client_id, shuttle), self._state.replicas[(self._state.id + 1)])
                self._state.last_slot_number = self._state.slot_number
                super()._label('_st_label_804', block=False)
                _st_label_804 = 0
                self._timer_start()
                while (_st_label_804 == 0):
                    _st_label_804 += 1
                    if PatternExpr_815.match_iter(self._ReplicaReceivedEvent_7, _BoundPattern822_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                        pass
                        _st_label_804 += 1
                    elif self._timer_expired:
                        self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                        _st_label_804 += 1
                    else:
                        super()._label('_st_label_804', block=True, timeout=self._state.replica_timeout)
                        _st_label_804 -= 1
            else:
                if (not (client_id in self._state.messages_shuttle)):
                    self._state.messages_shuttle[client_id] = 0
                self._state.messages_shuttle[client_id] += 1
                if self.validate_shuttle(args):
                    (self._state.order_proof, self._state.result_proof) = args
                    (self._state.slot_number, operation, self._state.configuration, order_stmt) = self._state.order_proof
                    self._state.last_slot_number = self._state.slot_number
                    (type, operation_args) = operation
                    result = self.update_running_state(type, operation_args)
                    self._state.order_proof[3].append([self._state.slot_number, (type, operation_args), self._state.configuration])
                    self._state.result_proof.append([(type, operation_args), self.calculate_hash(result)])
                    shuttle = (self._state.order_proof, self._state.result_proof)
                    if (self._id == self._state.tail):
                        result_shuttle = [result, self._state.result_proof]
                        self.sign_and_send(('Operation_result', result_shuttle), client)
                        self.send(('Operation_result_' + str(request_id)), to=client)
                        self.sign_and_send(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.tail)
                    else:
                        self.sign_and_send(('Request', type, self._id, client, request_id, client_id, shuttle), self._state.replicas[(self._state.id + 1)])
                        super()._label('_st_label_963', block=False)
                        _st_label_963 = 0
                        self._timer_start()
                        while (_st_label_963 == 0):
                            _st_label_963 += 1
                            if PatternExpr_974.match_iter(self._ReplicaReceivedEvent_8, _BoundPattern981_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                                pass
                                _st_label_963 += 1
                            elif self._timer_expired:
                                self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                                _st_label_963 += 1
                            else:
                                super()._label('_st_label_963', block=True, timeout=self._state.replica_timeout)
                                _st_label_963 -= 1
                else:
                    self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
    _Replica_handler_476._labels = None
    _Replica_handler_476._notlabels = None

    def _Replica_handler_1004(self, sender_id, request_from, request_id, client_id, result_shuttle):
        if (not (client_id in self._state.messages_result_shuttle)):
            self._state.messages_result_shuttle[client_id] = 0
        self._state.messages_result_shuttle[client_id] += 1
        try:
            self._state.replica_public_keys[sender_id].verify(result_shuttle)
            result_shuttle = literal_eval(result_shuttle.message.decode('utf-8'))
        except BadSignatureError:
            self.output((('Verification of message sent by Replica ' + sender_id) + ' has failed.'))
            return
        if self.validate_result_shuttle(result_shuttle):
            self._state.result_cache[request_id] = result_shuttle
            if (not (self._id == self._state.head)):
                self.sign_and_send(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.replicas[(self._state.id - 1)])
                self.send(('Result_shuttle_' + str(request_id)), to=self._state.replicas[(self._state.id - 1)])
            self.output((('Result shuttle is at ' + self._state.name) + '.'))
        else:
            self.output((('Result shuttle sent by Replica ' + sender_id) + ' is not valid.'))
            self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
    _Replica_handler_1004._labels = None
    _Replica_handler_1004._notlabels = None

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_3 = []
        self._OlympusReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_1653, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1652]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_1670, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1669]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_1713, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1712]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_3', PatternExpr_1769, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_4', PatternExpr_1792, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, name, num_replicas, all_replica_conf_failures, head_timeout, replica_timeout, **rest_2564):
        super().setup(name=name, num_replicas=num_replicas, all_replica_conf_failures=all_replica_conf_failures, head_timeout=head_timeout, replica_timeout=replica_timeout, **rest_2564)
        self._state.name = name
        self._state.num_replicas = num_replicas
        self._state.all_replica_conf_failures = all_replica_conf_failures
        self._state.head_timeout = head_timeout
        self._state.replica_timeout = replica_timeout
        self._state.replicas = list()
        self._state.replica_private_keys = list()
        self._state.replica_public_keys = list()
        self._state.head = None
        self._state.tail = None
        self._state.private_key = SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key.encode(encoder=HexEncoder)
        self._state.configuration_number = 0
        all_replica_failures = self._state.all_replica_conf_failures.get(self._state.configuration_number, {})
        for i in range(self._state.num_replicas):
            replica_failures = all_replica_failures.get(i, {})
            if (i == 0):
                replica = self.new(Replica, args=(i, 'Head', replica_failures, self._state.head_timeout))
                self._state.head = replica
            elif (i == (self._state.num_replicas - 1)):
                replica = self.new(Replica, args=(i, 'Tail', replica_failures, self._state.replica_timeout))
                self._state.tail = replica
            else:
                replica = self.new(Replica, args=(i, ('Replica ' + str(i)), replica_failures, self._state.replica_timeout))
            self._state.replicas.append(replica)
            signing_key = SigningKey.generate()
            verify_key = signing_key.verify_key.encode(encoder=HexEncoder)
            self._state.replica_private_keys.append(signing_key)
            self._state.replica_public_keys.append(verify_key)

    def run(self):
        self._start(self._state.replicas)
        self.send(('Configuration', self._id, self._state.replicas, self._state.head, self._state.tail, self._state.replica_public_keys, self._state.configuration_number), to=self._state.replicas)
        for i in range(len(self._state.replicas)):
            self.send(('Key', self._state.replica_private_keys[i]), to=self._state.replicas[i])
        super()._label('_st_label_1766', block=False)
        _st_label_1766 = 0
        while (_st_label_1766 == 0):
            _st_label_1766 += 1
            if PatternExpr_1776.match_iter(self._OlympusReceivedEvent_3, SELF_ID=self._id):
                _st_label_1766 += 1
            else:
                super()._label('_st_label_1766', block=True)
                _st_label_1766 -= 1
        super()._label('_st_label_1789', block=False)
        _st_label_1789 = 0
        while (_st_label_1789 == 0):
            _st_label_1789 += 1
            if PatternExpr_1796.match_iter(self._OlympusReceivedEvent_4, SELF_ID=self._id):
                _st_label_1789 += 1
            else:
                super()._label('_st_label_1789', block=True)
                _st_label_1789 -= 1

    def _Olympus_handler_1652(self, sender):
        self.output((('ACK from ' + str(sender)) + '.'))
    _Olympus_handler_1652._labels = None
    _Olympus_handler_1652._notlabels = None

    def _Olympus_handler_1669(self, client, client_name, client_id, client_public_key):
        self.send(('Configuration', self._state.replicas, self._state.head), to=client)
        self.send(('Keys', self._state.replica_public_keys), to=client)
        self.send(('Client_keys', client_id, client_public_key), to=self._state.replicas)
        self.output((('Configuration sent to ' + str(client_name)) + '.'))
    _Olympus_handler_1669._labels = None
    _Olympus_handler_1669._notlabels = None

    def _Olympus_handler_1712(self, sender, proof_of_misbehavior):
        self.output((('Reconfiguration request received from ' + str(sender)) + '.'))
        self.output('No reconfiguration mechanism implemented yet.')
    _Olympus_handler_1712._labels = None
    _Olympus_handler_1712._notlabels = None

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_3 = []
        self._ClientReceivedEvent_4 = []
        self._ClientReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_1872, sources=[PatternExpr_1881], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_1871]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_1902, sources=[PatternExpr_1909], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_1901]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_1935, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_1934]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_2015, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_4', PatternExpr_2072, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_5', PatternExpr_2111, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, client_id, olympus, request_id, client_timeout, operations, **rest_2564):
        super().setup(client_id=client_id, olympus=olympus, request_id=request_id, client_timeout=client_timeout, operations=operations, **rest_2564)
        self._state.client_id = client_id
        self._state.olympus = olympus
        self._state.request_id = request_id
        self._state.client_timeout = client_timeout
        self._state.operations = operations
        self._state.name = ('Client ' + str(self._state.client_id))
        self._state.replicas = None
        self._state.head = None
        self._state.replica_public_keys = None
        self._state.private_key = SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key.encode(encoder=HexEncoder)

    def run(self):
        if (self._state.replicas is None):
            self.send(('Get_configuration', self._id, self._state.name, self._state.client_id, self._state.public_key), to=self._state.olympus)
            super()._label('_st_label_2012', block=False)
            _st_label_2012 = 0
            while (_st_label_2012 == 0):
                _st_label_2012 += 1
                if PatternExpr_2022.match_iter(self._ClientReceivedEvent_3, _BoundPattern2032_=self._state.replicas, _BoundPattern2033_=self._state.head, SELF_ID=self._id):
                    _st_label_2012 += 1
                else:
                    super()._label('_st_label_2012', block=True)
                    _st_label_2012 -= 1
        for op in self._state.operations:
            self.output((('Local client state is updated with response ' + self.update_client_running_state(op[0], op[1])) + '.'))
            retry = 0
            while True:
                self.send_request(op[0], op[1], retry)
                super()._label('_st_label_2069', block=False)
                _st_label_2069 = 0
                self._timer_start()
                while (_st_label_2069 == 0):
                    _st_label_2069 += 1
                    if PatternExpr_2080.match_iter(self._ClientReceivedEvent_4, _BoundPattern2087_=('Operation_result_' + str(self._state.request_id)), SELF_ID=self._id):
                        break
                        _st_label_2069 += 1
                    elif self._timer_expired:
                        self.output('Timeout: Retrying.')
                        retry = 1
                        _st_label_2069 += 1
                    else:
                        super()._label('_st_label_2069', block=True, timeout=self._state.client_timeout)
                        _st_label_2069 -= 1
                else:
                    if (_st_label_2069 != 2):
                        continue
                if (_st_label_2069 != 2):
                    break
        self.output((('Local running state of client after the given set of operations: ' + str(client_running_state)) + '.'))
        super()._label('_st_label_2108', block=False)
        _st_label_2108 = 0
        while (_st_label_2108 == 0):
            _st_label_2108 += 1
            if PatternExpr_2115.match_iter(self._ClientReceivedEvent_5, SELF_ID=self._id):
                _st_label_2108 += 1
            else:
                super()._label('_st_label_2108', block=True)
                _st_label_2108 -= 1

    def update_client_running_state(self, type, args):
        if (type == 'put'):
            if (len(args) > 1):
                client_running_state[args[0]] = args[1]
            return 'OK'
        elif (type == 'get'):
            if (len(args) > 0):
                if (args[0] in client_running_state):
                    return client_running_state[args[0]]
                else:
                    return ''
        elif (type == 'slice'):
            if (len(args) > 1):
                if ((args[0] in client_running_state) and (args[1] <= len(client_running_state[args[0]]))):
                    client_running_state[args[0]] = client_running_state[args[0]][int(args[1]):]
                    return client_running_state[args[0]]
                else:
                    return 'fail'
        elif (type == 'append'):
            if (len(args) > 1):
                if (args[0] in client_running_state):
                    client_running_state[args[0]] = (client_running_state[args[0]] + args[1])
                    return 'OK'
                else:
                    return 'fail'

    def send_request(self, type, args, retry):
        args = self._state.private_key.sign(str(args).encode('utf-8'))
        if retry:
            self.send((None, 'Request', type, self._id, self._id, self._state.request_id, self._state.client_id, args), to=self._state.head)
        else:
            self._state.request_id += 1
            self.send((None, 'Request', type, self._id, self._id, self._state.request_id, self._state.client_id, args), to=self._state.head)

    def validate_result(self, result, result_proof):
        hash = self.calculate_hash(result)
        for i in result_proof:
            if (not (hash == i[1])):
                return False
        return True

    def calculate_hash(self, val):
        if isinstance(val, str):
            return sha256(str.encode(val), encoder=HexEncoder)
        return sha256(val, encoder=HexEncoder)

    def _Client_handler_1871(self, replicas_, head_, olympus):
        self._state.replicas = replicas_
        self._state.head = head_
        self.output((self._state.name + ' is configured.'))
        self.send(('ACK', self._state.name), to=olympus)
    _Client_handler_1871._labels = None
    _Client_handler_1871._notlabels = None

    def _Client_handler_1901(self, replica_public_keys_, olympus):
        self._state.replica_public_keys = [VerifyKey(key, encoder=HexEncoder) for key in replica_public_keys_]
        self.output((self._state.name + ' received the public keys of replicas from Olympus.'))
        self.send(('ACK', self._state.name), to=olympus)
    _Client_handler_1901._labels = None
    _Client_handler_1901._notlabels = None

    def _Client_handler_1934(self, sender_id, result_shuttle):
        try:
            self._state.replica_public_keys[sender_id].verify(result_shuttle)
            result_shuttle = literal_eval(result_shuttle.message.decode('utf-8'))
        except BadSignatureError:
            self.output((('Verification of message sent by Replica ' + sender_id) + ' has failed.'))
            return
        (result, result_proof) = result_shuttle
        if self.validate_result(result, result_proof):
            self.output((((result + ' received by ') + self._state.name) + '.'))
        else:
            self.send(('Reconfiguration', self._state.name, result_shuttle), to=self._state.olympus)
    _Client_handler_1934._labels = None
    _Client_handler_1934._notlabels = None

def parse_program_args(argv):
    inputfile = ''
    outputfile = ''
    try:
        (opts, args) = getopt.getopt(argv, 'hi:o:', ['ifile=', 'ofile='])
    except getopt.GetoptError:
        self.output('Error in parsing arguments')
        return None
    for (opt, arg) in opts:
        if (opt in ('-i', '--ifile')):
            inputfile = arg
        elif (opt in ('-o', '--ofile')):
            outputfile = arg
    return [inputfile, outputfile]

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        if (len(sys.argv) < 2):
            self.output('Incorrect argument count. Must specify the input configuration file atleast')
            return
        [infile, outfile] = parse_program_args(sys.argv[1:])
        if (infile == None):
            self.output('Must specify input configuration file!')
            sys.exit(2)
        config_dict = read_config.parse_config_file(infile)
        global_config = GlobalConfig(config_dict)
        client_config = ClientConfig(config_dict)
        replica_config = ReplicaConfig(config_dict)
        self.output(('Running BCR simulation for test case: ' + global_config.test_case_name))
        request_id_counter = 0
        olympus = self.new(Olympus, args=('Olympus', replica_config.num_replica, replica_config.failures, replica_config.head_timeout, replica_config.nonhead_timeout))
        self._start(olympus)
        clients = list()
        for i in range(client_config.num_client):
            modified_ops = list(map((lambda o: (o.type.name, o.args_list)), client_config.workloads[i]))
            self.output(('Ops are: ' + str(modified_ops)))
            client = self.new(Client, args=(i, olympus, request_id_counter, client_config.client_timeout, modified_ops))
            clients.append(client)
        self._start(clients)
