# -*- generated by 1.0.9 -*-
import da
PatternExpr_347 = da.pat.ConstantPattern('Shutdown')
PatternExpr_351 = da.pat.BoundPattern('_BoundPattern352_')
PatternExpr_365 = da.pat.ConstantPattern('Shutdown')
PatternExpr_369 = da.pat.FreePattern('olympus')
PatternExpr_381 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.FreePattern('olympus_'), da.pat.FreePattern('replicas_'), da.pat.FreePattern('head_'), da.pat.FreePattern('tail_'), da.pat.FreePattern('replica_public_keys_'), da.pat.FreePattern('config_number')])
PatternExpr_436 = da.pat.TuplePattern([da.pat.ConstantPattern('Key'), da.pat.FreePattern('private_key_')])
PatternExpr_458 = da.pat.TuplePattern([da.pat.ConstantPattern('Client_keys'), da.pat.FreePattern('client_id'), da.pat.FreePattern('client_public_key')])
PatternExpr_483 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Request'), da.pat.FreePattern('type'), da.pat.FreePattern('request_from'), da.pat.FreePattern('client'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('args')])
PatternExpr_667 = da.pat.BoundPattern('_BoundPattern673_')
PatternExpr_883 = da.pat.BoundPattern('_BoundPattern889_')
PatternExpr_1104 = da.pat.BoundPattern('_BoundPattern1110_')
PatternExpr_1143 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Result_shuttle'), da.pat.FreePattern('request_from'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('result_shuttle')])
PatternExpr_353 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern359_')]), da.pat.ConstantPattern('Shutdown')])
PatternExpr_675 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern682_')])
PatternExpr_891 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern898_')])
PatternExpr_1112 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern1119_')])
PatternExpr_1824 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.FreePattern('sender')])
PatternExpr_1841 = da.pat.TuplePattern([da.pat.ConstantPattern('Get_configuration'), da.pat.FreePattern('client'), da.pat.FreePattern('client_name'), da.pat.FreePattern('client_id'), da.pat.FreePattern('client_public_key')])
PatternExpr_1884 = da.pat.TuplePattern([da.pat.ConstantPattern('Reconfiguration'), da.pat.FreePattern('sender'), da.pat.FreePattern('proof_of_misbehavior')])
PatternExpr_1940 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])
PatternExpr_1963 = da.pat.ConstantPattern('Shutdown')
PatternExpr_1947 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])])
PatternExpr_1967 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.ConstantPattern('Shutdown')])
PatternExpr_2043 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.FreePattern('replicas_'), da.pat.FreePattern('head_')])
PatternExpr_2052 = da.pat.FreePattern('olympus')
PatternExpr_2073 = da.pat.TuplePattern([da.pat.ConstantPattern('Keys'), da.pat.FreePattern('replica_public_keys_')])
PatternExpr_2080 = da.pat.FreePattern('olympus')
PatternExpr_2106 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Operation_result'), da.pat.FreePattern('result_shuttle')])
PatternExpr_2186 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.BoundPattern('_BoundPattern2189_'), da.pat.BoundPattern('_BoundPattern2190_')])
PatternExpr_2243 = da.pat.BoundPattern('_BoundPattern2249_')
PatternExpr_2282 = da.pat.ConstantPattern('Shutdown')
PatternExpr_2193 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.BoundPattern('_BoundPattern2203_'), da.pat.BoundPattern('_BoundPattern2204_')])])
PatternExpr_2251 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern2258_')])
PatternExpr_2286 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.ConstantPattern('Shutdown')])
_config_object = {'channel': {'reliable', 'fifo'}}
from nacl.hash import sha256
from nacl.encoding import HexEncoder
from nacl.signing import SigningKey, VerifyKey
from nacl.exceptions import BadSignatureError
from ast import literal_eval
from config import *
import read_config
import sys
import getopt
client_running_state = dict()

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_6 = []
        self._ReplicaReceivedEvent_7 = []
        self._ReplicaReceivedEvent_8 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_347, sources=[PatternExpr_351], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_365, sources=[PatternExpr_369], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_364]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_381, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_380]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_436, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_435]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_458, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_457]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_5', PatternExpr_483, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_482]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_6', PatternExpr_667, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_7', PatternExpr_883, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_8', PatternExpr_1104, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_9', PatternExpr_1143, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1142])])

    def setup(self, id, name, replica_failures, replica_timeout, **rest_2735):
        super().setup(id=id, name=name, replica_failures=replica_failures, replica_timeout=replica_timeout, **rest_2735)
        self._state.id = id
        self._state.name = name
        self._state.replica_failures = replica_failures
        self._state.replica_timeout = replica_timeout
        self.output(('replica failures: ' + str(self._state.replica_failures)))
        self._state.status = 0
        self._state.running_state = dict()
        self._state.order_proof = list()
        self._state.result_proof = list()
        self._state.result_cache = dict()
        self._state.slot_number = 0
        self._state.last_slot_number = 0
        self._state.olympus = None
        self._state.replicas = None
        self._state.head = None
        self._state.tail = None
        self._state.replica_public_keys = None
        self._state.private_key = None
        self._state.client_keys = dict()
        self._state.configuration = None
        self._state.current_failure_scenario = {}
        self._state.messages_received_from_client = {}
        self._state.messages_shuttle = {}
        self._state.messages_result_shuttle = {}
        self._state.messages_forwarded_request = {}

    def run(self):
        self._state.status = 1
        super()._label('_st_label_344', block=False)
        _st_label_344 = 0
        while (_st_label_344 == 0):
            _st_label_344 += 1
            if PatternExpr_353.match_iter(self._ReplicaReceivedEvent_0, _BoundPattern359_=self._state.olympus, SELF_ID=self._id):
                _st_label_344 += 1
            else:
                super()._label('_st_label_344', block=True)
                _st_label_344 -= 1

    def update_running_state(self, type, args):
        if (type == 'put'):
            if (len(args) > 1):
                self._state.running_state[args[0]] = args[1]
            return 'OK'
        elif (type == 'get'):
            if (len(args) > 0):
                if (args[0] in self._state.running_state):
                    return self._state.running_state[args[0]]
                else:
                    return ''
        elif (type == 'slice'):
            if (len(args) > 1):
                if ((args[0] in self._state.running_state) and (args[1] <= len(self._state.running_state[args[0]]))):
                    self._state.running_state[args[0]] = self._state.running_state[args[0]][int(args[1]):]
                    return self._state.running_state[args[0]]
                else:
                    return 'fail'
        elif (type == 'append'):
            if (len(args) > 1):
                if (args[0] in self._state.running_state):
                    self._state.running_state[args[0]] = (self._state.running_state[args[0]] + args[1])
                    return 'OK'
                else:
                    return 'fail'

    def calculate_hash(self, val):
        if isinstance(val, str):
            return sha256(str.encode(val), encoder=HexEncoder)
        return sha256(val, encoder=HexEncoder)

    def validate_shuttle(self, shuttle):
        (self._state.order_proof, self._state.result_proof) = shuttle
        (self._state.slot_number, operation, self._state.configuration, order_stmt) = self._state.order_proof
        if (not (self._state.last_slot_number == (self._state.slot_number - 1))):
            return False
        for stmt in order_stmt:
            if ((not (stmt[0] == self._state.slot_number)) or (not (stmt[1] == operation)) or (not (stmt[2] == self._state.configuration))):
                return False
        hash = self._state.result_proof[0][1]
        for result_stmt in self._state.result_proof:
            if ((not (result_stmt[0] == operation)) or (not (result_stmt[1] == hash))):
                return False
        return True

    def validate_result_shuttle(self, result_shuttle):
        (result, self._state.result_proof) = result_shuttle
        hash = self.calculate_hash(result)
        for i in self._state.result_proof:
            if (not (hash == i[1])):
                return False
        return True

    def sign_and_send(self, data, to_):
        data = ([self._state.id] + list(data))
        data[(- 1)] = self._state.private_key.sign(str(data[(- 1)]).encode('utf-8'))
        self.send(tuple(data), to=to_)

    def check_failure(self, replica_failures, source_id, source_message_count, required_type):
        for (i, failure) in enumerate(replica_failures):
            oper = failure.operands
            if ((failure.failure_type == required_type) and (source_id == oper[0]) and (source_message_count == oper[1])):
                return (True, failure)
        return (False, None)

    def _Replica_handler_364(self, olympus):
        self._state.status = 2
        self.output((self._state.name + ' is immutable and shutting down.'))
    _Replica_handler_364._labels = None
    _Replica_handler_364._notlabels = None

    def _Replica_handler_380(self, olympus_, replicas_, head_, tail_, replica_public_keys_, config_number):
        self._state.olympus = olympus_
        self._state.replicas = replicas_
        self._state.head = head_
        self._state.tail = tail_
        self._state.replica_public_keys = [VerifyKey(key, encoder=HexEncoder) for key in replica_public_keys_]
        self._state.configuration = config_number
        self.output((self._state.name + ' is configured.'))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_380._labels = None
    _Replica_handler_380._notlabels = None

    def _Replica_handler_435(self, private_key_):
        self._state.private_key = private_key_
        self.output((self._state.name + ' have received its private key from Olympus.'))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_435._labels = None
    _Replica_handler_435._notlabels = None

    def _Replica_handler_457(self, client_id, client_public_key):
        self._state.client_keys[client_id] = VerifyKey(client_public_key, encoder=HexEncoder)
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_457._labels = None
    _Replica_handler_457._notlabels = None

    def _Replica_handler_482(self, sender_id, type, request_from, client, request_id, client_id, args):
        self.output((((((str(type) + ' request with request id ') + str(request_id)) + ' received by ') + self._state.name) + '.'))
        if (self._state.status == 0):
            self.output((self._state.name + ' is in PENDING state.'))
        elif (self._state.status == 1):
            self.output((self._state.name + ' is in ACTIVE state.'))
        elif (self._state.status == 2):
            self.output((self._state.name + ' is in IMMUTABLE state.'))
        if (self._state.status == 1):
            if (request_from == client):
                if (not (client_id in self._state.messages_received_from_client)):
                    self._state.messages_received_from_client[client_id] = 0
                (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_received_from_client[client_id], FailureType.client_request)
                if is_trigger:
                    self._state.current_failure_scenario[scenario.action_type] = 1
                    self.output('Replica {}: Trigger client request failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_received_from_client[client_id], self._state.current_failure_scenario))
                self._state.messages_received_from_client[client_id] += 1
                try:
                    self._state.client_keys[client_id].verify(args)
                    args = literal_eval(args.message.decode('utf-8'))
                except BadSignatureError:
                    self.output((('Verification of message sent by Client ' + str(client_id)) + ' has failed.'))
                    return
                if (request_id in self._state.result_cache):
                    self.sign_and_send(('Operation_result', self._state.result_cache[request_id]), client)
                    self.output((('Result sent from cache of ' + self._state.name) + '.'))
                    return
                elif (not (self._id == self._state.head)):
                    self.sign_and_send(('Request', type, self._id, client, request_id, client_id, args), self._state.head)
                    super()._label('_st_label_664', block=False)
                    _st_label_664 = 0
                    self._timer_start()
                    while (_st_label_664 == 0):
                        _st_label_664 += 1
                        if PatternExpr_675.match_iter(self._ReplicaReceivedEvent_6, _BoundPattern682_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                            pass
                            _st_label_664 += 1
                        elif self._timer_expired:
                            self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                            _st_label_664 += 1
                        else:
                            super()._label('_st_label_664', block=True, timeout=self._state.replica_timeout)
                            _st_label_664 -= 1
                    return
            else:
                try:
                    self._state.replica_public_keys[sender_id].verify(args)
                    args = literal_eval(args.message.decode('utf-8'))
                except BadSignatureError:
                    self.output((('Verification of message sent by Replica ' + str(sender_id)) + ' has failed.'))
                    return
            if (self._id == self._state.head):
                if (not (request_from == client)):
                    if (not (client_id in messages_forwared_request)):
                        messages_forwared_request[client_id] = 0
                    (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, messages_forwared_request[client_id], FailureType.forwarded_request)
                    if is_trigger:
                        self._state.current_failure_scenario[scenario.action_type] = 1
                        self.output('Replica {}: Trigger forwarded request failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, messages_forwared_request[client_id], self._state.current_failure_scenario))
                    messages_forwared_request[client_id] += 1
                result = self.update_running_state(type, args)
                self._state.slot_number += 1
                if ((FailureActionType.change_operation in self._state.current_failure_scenario) and (self._state.current_failure_scenario[FailureActionType.change_operation] == 1)):
                    stmt_type = 'get'
                    stmt_args = ['x']
                    self._state.current_failure_scenario[FailureActionType.change_operation] = 0
                else:
                    stmt_type = type
                    stmt_args = args
                order_stmt = [[self._state.slot_number, (stmt_type, stmt_args), self._state.configuration]]
                self._state.order_proof = [self._state.slot_number, (type, args), self._state.configuration, order_stmt]
                self._state.result_proof = [[(type, args), self.calculate_hash(result)]]
                shuttle = (self._state.order_proof, self._state.result_proof)
                self.sign_and_send(('Request', type, self._id, client, request_id, client_id, shuttle), self._state.replicas[(self._state.id + 1)])
                self._state.last_slot_number = self._state.slot_number
                super()._label('_st_label_880', block=False)
                _st_label_880 = 0
                self._timer_start()
                while (_st_label_880 == 0):
                    _st_label_880 += 1
                    if PatternExpr_891.match_iter(self._ReplicaReceivedEvent_7, _BoundPattern898_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                        pass
                        _st_label_880 += 1
                    elif self._timer_expired:
                        self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                        _st_label_880 += 1
                    else:
                        super()._label('_st_label_880', block=True, timeout=self._state.replica_timeout)
                        _st_label_880 -= 1
            else:
                if (not (client_id in self._state.messages_shuttle)):
                    self._state.messages_shuttle[client_id] = 0
                (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_shuttle[client_id], FailureType.shuttle)
                if is_trigger:
                    self._state.current_failure_scenario[scenario.action_type] = 1
                    self.output('Replica {}: Trigger shuttle failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_shuttle[client_id], self._state.current_failure_scenario))
                self._state.messages_shuttle[client_id] += 1
                self.output(('Args: ' + str(args)))
                if self.validate_shuttle(args):
                    (self._state.order_proof, self._state.result_proof) = args
                    (self._state.slot_number, operation, self._state.configuration, order_stmt) = self._state.order_proof
                    self._state.last_slot_number = self._state.slot_number
                    (type, operation_args) = operation
                    result = self.update_running_state(type, operation_args)
                    if ((FailureActionType.change_operation in self._state.current_failure_scenario) and (self._state.current_failure_scenario[FailureActionType.change_operation] == 1)):
                        type = 'get'
                        operation_args = ['x']
                        self._state.current_failure_scenario[FailureActionType.change_operation] = 0
                    self._state.order_proof[3].append([self._state.slot_number, (type, operation_args), self._state.configuration])
                    self._state.result_proof.append([(type, operation_args), self.calculate_hash(result)])
                    shuttle = (self._state.order_proof, self._state.result_proof)
                    if (self._id == self._state.tail):
                        result_shuttle = [result, self._state.result_proof]
                        self.sign_and_send(('Operation_result', result_shuttle), client)
                        self.send(('Operation_result_' + str(request_id)), to=client)
                        self.sign_and_send(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.tail)
                    else:
                        self.sign_and_send(('Request', type, self._id, client, request_id, client_id, shuttle), self._state.replicas[(self._state.id + 1)])
                        super()._label('_st_label_1101', block=False)
                        _st_label_1101 = 0
                        self._timer_start()
                        while (_st_label_1101 == 0):
                            _st_label_1101 += 1
                            if PatternExpr_1112.match_iter(self._ReplicaReceivedEvent_8, _BoundPattern1119_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                                pass
                                _st_label_1101 += 1
                            elif self._timer_expired:
                                self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                                _st_label_1101 += 1
                            else:
                                super()._label('_st_label_1101', block=True, timeout=self._state.replica_timeout)
                                _st_label_1101 -= 1
                else:
                    self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
    _Replica_handler_482._labels = None
    _Replica_handler_482._notlabels = None

    def _Replica_handler_1142(self, sender_id, request_from, request_id, client_id, result_shuttle):
        if (not (client_id in self._state.messages_result_shuttle)):
            self._state.messages_result_shuttle[client_id] = 0
        (is_trigger, scenario) = self.check_failure(self._state.replica_failures, client_id, self._state.messages_result_shuttle[client_id], FailureType.result_shuttle)
        if is_trigger:
            self._state.current_failure_scenario[scenario.action_type] = 1
            self.output('Replica {}: Trigger result shuttle failure for client_id: {} and message count: {}, scenario: {}'.format(self._state.name, client_id, self._state.messages_result_shuttle[client_id], self._state.current_failure_scenario))
        self._state.messages_result_shuttle[client_id] += 1
        try:
            self._state.replica_public_keys[sender_id].verify(result_shuttle)
            result_shuttle = literal_eval(result_shuttle.message.decode('utf-8'))
        except BadSignatureError:
            self.output((('Verification of message sent by Replica ' + sender_id) + ' has failed.'))
            return
        if self.validate_result_shuttle(result_shuttle):
            self._state.result_cache[request_id] = result_shuttle
            if (not (self._id == self._state.head)):
                self.sign_and_send(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.replicas[(self._state.id - 1)])
                self.send(('Result_shuttle_' + str(request_id)), to=self._state.replicas[(self._state.id - 1)])
            self.output((('Result shuttle is at ' + self._state.name) + '.'))
        else:
            self.output((('Result shuttle sent by Replica ' + sender_id) + ' is not valid.'))
            self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
    _Replica_handler_1142._labels = None
    _Replica_handler_1142._notlabels = None

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_3 = []
        self._OlympusReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_1824, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1823]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_1841, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1840]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_1884, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1883]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_3', PatternExpr_1940, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_4', PatternExpr_1963, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, name, num_replicas, all_replica_conf_failures, head_timeout, replica_timeout, **rest_2735):
        super().setup(name=name, num_replicas=num_replicas, all_replica_conf_failures=all_replica_conf_failures, head_timeout=head_timeout, replica_timeout=replica_timeout, **rest_2735)
        self._state.name = name
        self._state.num_replicas = num_replicas
        self._state.all_replica_conf_failures = all_replica_conf_failures
        self._state.head_timeout = head_timeout
        self._state.replica_timeout = replica_timeout
        self._state.replicas = list()
        self._state.replica_private_keys = list()
        self._state.replica_public_keys = list()
        self._state.head = None
        self._state.tail = None
        self._state.private_key = SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key.encode(encoder=HexEncoder)
        self._state.configuration_number = 0
        all_replica_failures = self._state.all_replica_conf_failures.get(self._state.configuration_number, {})
        for i in range(self._state.num_replicas):
            replica_failures = all_replica_failures.get(i, {})
            if (i == 0):
                replica = self.new(Replica, args=(i, 'Head', replica_failures, self._state.head_timeout))
                self._state.head = replica
            elif (i == (self._state.num_replicas - 1)):
                replica = self.new(Replica, args=(i, 'Tail', replica_failures, self._state.replica_timeout))
                self._state.tail = replica
            else:
                replica = self.new(Replica, args=(i, ('Replica ' + str(i)), replica_failures, self._state.replica_timeout))
            self._state.replicas.append(replica)
            signing_key = SigningKey.generate()
            verify_key = signing_key.verify_key.encode(encoder=HexEncoder)
            self._state.replica_private_keys.append(signing_key)
            self._state.replica_public_keys.append(verify_key)

    def run(self):
        self._start(self._state.replicas)
        self.send(('Configuration', self._id, self._state.replicas, self._state.head, self._state.tail, self._state.replica_public_keys, self._state.configuration_number), to=self._state.replicas)
        for i in range(len(self._state.replicas)):
            self.send(('Key', self._state.replica_private_keys[i]), to=self._state.replicas[i])
        super()._label('_st_label_1937', block=False)
        _st_label_1937 = 0
        while (_st_label_1937 == 0):
            _st_label_1937 += 1
            if PatternExpr_1947.match_iter(self._OlympusReceivedEvent_3, SELF_ID=self._id):
                _st_label_1937 += 1
            else:
                super()._label('_st_label_1937', block=True)
                _st_label_1937 -= 1
        super()._label('_st_label_1960', block=False)
        _st_label_1960 = 0
        while (_st_label_1960 == 0):
            _st_label_1960 += 1
            if PatternExpr_1967.match_iter(self._OlympusReceivedEvent_4, SELF_ID=self._id):
                _st_label_1960 += 1
            else:
                super()._label('_st_label_1960', block=True)
                _st_label_1960 -= 1

    def _Olympus_handler_1823(self, sender):
        self.output((('ACK from ' + str(sender)) + '.'))
    _Olympus_handler_1823._labels = None
    _Olympus_handler_1823._notlabels = None

    def _Olympus_handler_1840(self, client, client_name, client_id, client_public_key):
        self.send(('Configuration', self._state.replicas, self._state.head), to=client)
        self.send(('Keys', self._state.replica_public_keys), to=client)
        self.send(('Client_keys', client_id, client_public_key), to=self._state.replicas)
        self.output((('Configuration sent to ' + str(client_name)) + '.'))
    _Olympus_handler_1840._labels = None
    _Olympus_handler_1840._notlabels = None

    def _Olympus_handler_1883(self, sender, proof_of_misbehavior):
        self.output((('Reconfiguration request received from ' + str(sender)) + '.'))
        self.output('No reconfiguration mechanism implemented yet.')
    _Olympus_handler_1883._labels = None
    _Olympus_handler_1883._notlabels = None

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_3 = []
        self._ClientReceivedEvent_4 = []
        self._ClientReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_2043, sources=[PatternExpr_2052], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_2042]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_2073, sources=[PatternExpr_2080], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_2072]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_2106, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_2105]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_2186, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_4', PatternExpr_2243, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_5', PatternExpr_2282, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, client_id, olympus, request_id, client_timeout, operations, **rest_2735):
        super().setup(client_id=client_id, olympus=olympus, request_id=request_id, client_timeout=client_timeout, operations=operations, **rest_2735)
        self._state.client_id = client_id
        self._state.olympus = olympus
        self._state.request_id = request_id
        self._state.client_timeout = client_timeout
        self._state.operations = operations
        self._state.name = ('Client ' + str(self._state.client_id))
        self._state.replicas = None
        self._state.head = None
        self._state.replica_public_keys = None
        self._state.private_key = SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key.encode(encoder=HexEncoder)

    def run(self):
        if (self._state.replicas is None):
            self.send(('Get_configuration', self._id, self._state.name, self._state.client_id, self._state.public_key), to=self._state.olympus)
            super()._label('_st_label_2183', block=False)
            _st_label_2183 = 0
            while (_st_label_2183 == 0):
                _st_label_2183 += 1
                if PatternExpr_2193.match_iter(self._ClientReceivedEvent_3, _BoundPattern2203_=self._state.replicas, _BoundPattern2204_=self._state.head, SELF_ID=self._id):
                    _st_label_2183 += 1
                else:
                    super()._label('_st_label_2183', block=True)
                    _st_label_2183 -= 1
        for op in self._state.operations:
            self.output((('Local client state is updated with response ' + self.update_client_running_state(op[0], op[1])) + '.'))
            retry = 0
            while True:
                self.send_request(op[0], op[1], retry)
                super()._label('_st_label_2240', block=False)
                _st_label_2240 = 0
                self._timer_start()
                while (_st_label_2240 == 0):
                    _st_label_2240 += 1
                    if PatternExpr_2251.match_iter(self._ClientReceivedEvent_4, _BoundPattern2258_=('Operation_result_' + str(self._state.request_id)), SELF_ID=self._id):
                        break
                        _st_label_2240 += 1
                    elif self._timer_expired:
                        self.output('Timeout: Retrying.')
                        retry = 1
                        _st_label_2240 += 1
                    else:
                        super()._label('_st_label_2240', block=True, timeout=self._state.client_timeout)
                        _st_label_2240 -= 1
                else:
                    if (_st_label_2240 != 2):
                        continue
                if (_st_label_2240 != 2):
                    break
        self.output((('Local running state of client after the given set of operations: ' + str(client_running_state)) + '.'))
        super()._label('_st_label_2279', block=False)
        _st_label_2279 = 0
        while (_st_label_2279 == 0):
            _st_label_2279 += 1
            if PatternExpr_2286.match_iter(self._ClientReceivedEvent_5, SELF_ID=self._id):
                _st_label_2279 += 1
            else:
                super()._label('_st_label_2279', block=True)
                _st_label_2279 -= 1

    def update_client_running_state(self, type, args):
        if (type == 'put'):
            if (len(args) > 1):
                client_running_state[args[0]] = args[1]
            return 'OK'
        elif (type == 'get'):
            if (len(args) > 0):
                if (args[0] in client_running_state):
                    return client_running_state[args[0]]
                else:
                    return ''
        elif (type == 'slice'):
            if (len(args) > 1):
                if ((args[0] in client_running_state) and (args[1] <= len(client_running_state[args[0]]))):
                    client_running_state[args[0]] = client_running_state[args[0]][int(args[1]):]
                    return client_running_state[args[0]]
                else:
                    return 'fail'
        elif (type == 'append'):
            if (len(args) > 1):
                if (args[0] in client_running_state):
                    client_running_state[args[0]] = (client_running_state[args[0]] + args[1])
                    return 'OK'
                else:
                    return 'fail'

    def send_request(self, type, args, retry):
        args = self._state.private_key.sign(str(args).encode('utf-8'))
        if retry:
            self.send((None, 'Request', type, self._id, self._id, self._state.request_id, self._state.client_id, args), to=self._state.replicas)
        else:
            self._state.request_id += 1
            self.send((None, 'Request', type, self._id, self._id, self._state.request_id, self._state.client_id, args), to=self._state.head)

    def validate_result(self, result, result_proof):
        hash = self.calculate_hash(result)
        for i in result_proof:
            if (not (hash == i[1])):
                return False
        return True

    def calculate_hash(self, val):
        if isinstance(val, str):
            return sha256(str.encode(val), encoder=HexEncoder)
        return sha256(val, encoder=HexEncoder)

    def _Client_handler_2042(self, replicas_, head_, olympus):
        self._state.replicas = replicas_
        self._state.head = head_
        self.output((self._state.name + ' is configured.'))
        self.send(('ACK', self._state.name), to=olympus)
    _Client_handler_2042._labels = None
    _Client_handler_2042._notlabels = None

    def _Client_handler_2072(self, replica_public_keys_, olympus):
        self._state.replica_public_keys = [VerifyKey(key, encoder=HexEncoder) for key in replica_public_keys_]
        self.output((self._state.name + ' received the public keys of replicas from Olympus.'))
        self.send(('ACK', self._state.name), to=olympus)
    _Client_handler_2072._labels = None
    _Client_handler_2072._notlabels = None

    def _Client_handler_2105(self, sender_id, result_shuttle):
        try:
            self._state.replica_public_keys[sender_id].verify(result_shuttle)
            result_shuttle = literal_eval(result_shuttle.message.decode('utf-8'))
        except BadSignatureError:
            self.output((('Verification of message sent by Replica ' + sender_id) + ' has failed.'))
            return
        (result, result_proof) = result_shuttle
        if self.validate_result(result, result_proof):
            self.output((((result + ' received by ') + self._state.name) + '.'))
        else:
            self.send(('Reconfiguration', self._state.name, result_shuttle), to=self._state.olympus)
    _Client_handler_2105._labels = None
    _Client_handler_2105._notlabels = None

def parse_program_args(argv):
    inputfile = ''
    outputfile = ''
    try:
        (opts, args) = getopt.getopt(argv, 'hi:o:', ['ifile=', 'ofile='])
    except getopt.GetoptError:
        self.output('Error in parsing arguments')
        return None
    for (opt, arg) in opts:
        if (opt in ('-i', '--ifile')):
            inputfile = arg
        elif (opt in ('-o', '--ofile')):
            outputfile = arg
    return [inputfile, outputfile]

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        if (len(sys.argv) < 2):
            self.output('Incorrect argument count. Must specify the input configuration file atleast')
            return
        [infile, outfile] = parse_program_args(sys.argv[1:])
        if (infile == None):
            self.output('Must specify input configuration file!')
            sys.exit(2)
        config_dict = read_config.parse_config_file(infile)
        global_config = GlobalConfig(config_dict)
        client_config = ClientConfig(config_dict)
        replica_config = ReplicaConfig(config_dict)
        self.output(('Running BCR simulation for test case: ' + global_config.test_case_name))
        request_id_counter = 0
        olympus = self.new(Olympus, args=('Olympus', replica_config.num_replica, replica_config.failures, replica_config.head_timeout, replica_config.nonhead_timeout))
        self._start(olympus)
        clients = list()
        for i in range(client_config.num_client):
            modified_ops = list(map((lambda o: (o.type.name, o.args_list)), client_config.workloads[i]))
            self.output(('Ops are: ' + str(modified_ops)))
            client = self.new(Client, args=(i, olympus, request_id_counter, client_config.client_timeout, modified_ops))
            clients.append(client)
        self._start(clients)
