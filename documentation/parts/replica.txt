# Assumption: The slot number is global and not per client.
global slots_used = 0 # initialize global variable slot number

global get_slot_number():
    slots_used += 1
    return slots_used

Replica:
    # Assumption: One shuttle supports one operation per each client.
    # Assumption: Only one configuration is active at a given time.

    # A replica can have either of three states at a given time: ACTIVE, PENDING, or IMMUTABLE
    # Initial configuration has all replicas with active state
    # All other configuration replicas are in pending state
    # A replica goes to immutable state in case of a potential failure (upon wedge request from Olympus)
    # sign(data, key) => Sign the data with the given private key
    # verify_signature(message, signature, key) => Check private key's signature with a public key and message
    # hash => Calculate hash of the given data
    # s => slot number allotted to the requested operation
    # o => requested operation by the client
    # head => head replica of the current configuration
    # tail => tail replica of the current configuration
    # result_cache = {} # key-value store to cache result against particular request id
    # checkpoint_proof => list of hashed running states of each replica along the chain
    # T => number of faults that can be tolerated by 2T + 1 replicas
    # timer => creates a timer for the current replica

    # replica state variables
    replica_id  # id of the current replica
    state = {ACTIVE | PENDING | IMMUTABLE}
    running_state   # current state of the replica in the given configuration
    history = []    # history of the current replica, contains the list of order proofs for all operations since the last checkpoint
    private_key     # private key of current replica
    replica_public_keys  # public keys of all replicas in the chain
    timeout         # timeout period for operations

    # replica constructor
    Replica (replica_list, replica_public_keys, own_private_key, timeout):
        replicas = replica_list
        head = 0
        tail = 2T - 1
        replica_public_keys = replica_public_keys
        private_key = own_private_key
        timeout = timeout

    # replica methods

    send(event message, ...) to receiver:
        # sends the event message to the receiver with the given variable arguments
        # It is assumed that the programming language and compiler exposes an implementation of a similar method for
        # inter-process communication among different nodes


    init_request(request_id, o): # head will start the request shuttle upon receiving client's request
        if replica_id == head:
            s = get_slot_number() # get the next unused slot number
            request_shuttle = Request_Shuttle(request_id) # initialize request shuttle
            wait(order_command(s, o, request_shuttle), timeout) # wait until the result_shuttle is received
            # Assumption: If the head receives the result shuttle before the timeout, timer will be cancelled


    init_checkpointing():
        if slot_number / 100 is integer: # for every 100 slots, create new checkpoint and clear cache
            clear_cache() # clear cache after every 100 slots
            checkpoint_proof = [hash(running_state)] # initialize checkpoint proof
            checkpoint = slot_number
            send("checkpointing", checkpoint, checkpoint_proof) to replicas[replica_id + 1]


    apply_operation(o):
        result = o(running_state) # running_state is modified to new running_state
        return result

    is_valid_proof(s, o, order_proof):
        for each <s_p, o_p, r_p> in order_proof: # s_p, o_p, and r_p is the slot number, operation and replica id of each previous replica in the
                                                 # configuration respectively
        if s == s_p and o != o_p:
            return false
        return true

    order_command(s, o, request_shuttle):
        for each previous replica r_p:
            if not verify_signature(request_shuttle.order_proof of r_p, public key of r_p):
                send('request_reconfiguration_replica') to Olympus # notify Olympus if any of the previous replica is incorrectly signed
                return
        if not is_valid_proof(s, o, request_shuttle.order_proof):
            send('request_reconfiguration_replica') to Olympus # notify Olympus if the operation described against a specific slot number is not unique in the
                                           # order-proofs of previous replicas
            return
        request_shuttle.order_proof = request_shuttle.order_proof + H([s, o], replica_private_key)
        history = history + [request_shuttle.order_proof]
        result = apply_operation(o)
        request_shuttle.result_proof = request_shuttle.result_proof + H([o, hash(result)], replica_private_key)
        return request_shuttle

    # Assumption: instead of making multiple methods for receiving messages, we make one method that does if-else handling
    on_message_received(statement, ...):
        if statement == "request": # request can be either from client or peer replicas
            send_result_to_client(request_id_args) # request_id_args => request_id_args passed from the variable arguments

        else if statement == "wedge": # On receiving wedge request from Olympus
            state = IMMUTABLE # change state to IMMUTABLE
            send("wedge_request", history, checkpoint_proof, hash(running_state)) to Olympus

        else if statement == "catch_up": # Upon receiving catch up request from Olympus
            catch_up(set_of_operations_to_apply)

        else if statement == "get_running_state":
            send("running_state", running_state) to Olympus

        else if statement == "result_shuttle":
            result_shuttle = receive_result_shuttle_from_successor(request_id, result_shuttle_args) # result_shuttle_args => result_shuttle passed from the
                                                                                   # variable arguments
            forward_result_shuttle_to_predessor(request_id, result_shuttle)

        else if statement == "request_shuttle":
            request_shuttle = receive_request_shuttle_from_predessor(s, o, request_shuttle_args)     # request_shuttle_args => request_shuttle passed from the
                                                                                   # variable arguments
            forward_request_shuttle_to_successor(request_shuttle)

        else if statement == "checkpointing":
            if replica_id < tail:
                checkpoint_proof = checkpoint_proof_args + [hash(running_state)] # checkpoint_proof_args => checkpoint_proof passed from the
                                                                                 # variable arguments
                send('checkpointing', checkpoint, checkpoint_proof) to replicas[replica_id + 1]
            else:
                send('checkpoint_proof', checkpoint) to replicas[replica_id - 1]
                history = history[checkpoint:] # truncating history before the checkpoint

        else if statement == "checkpoint_proof":
            if replica_id < tail:
                send("checkpoint_proof", checkpoint) to replicas[replica_id - 1]
                history = history[checkpoint:] # truncating history before the checkpoint


    forward_result_shuttle_to_predessor(request_id, result_shuttle):
        send("result_shuttle", request_id, result_shuttle) to replicas[replica_id - 1]


    receive_result_shuttle_from_successor(request_id, request_shuttle):
        result_cache[request_id] = (result_shuttle.r, result_shuttle.result_proof) # result_shuttle.r => result provided by predecessor


    forward_request_shuttle_to_successor(request_shuttle):
        send("request_shuttle", s, o, request_shuttle.request_id, request_shuttle) to replicas[replica_id + 1]


    receive_request_shuttle_from_predessor(s, o, request_shuttle):
        request_shuttle = order_command(s, o, request_shuttle)
        return request_shuttle


    check_cache(request_id): # check result cache for previously saved results
        if request_id in result_cache:
            return true
        return false


    clear_cache():
        if slot_number / 100 is an integer:
            result_cache = {} # clear cache for every 100 slots, other cache management techniques can also
                              # be applied to enhance implementation performance


    send_result_to_client(request_id, client):
        if check_cache(request_id):
            send('result', result_cache[request_id]) to client
        else:
            if replica_id > head:
                send('redirect_to_head', request_id) to replicas[head]  # redirect request to head if not found in result cache
                wait(on_message_received('result_shuttle'), timeout) # wait for result_shuttle message till timeout
                # if the request times out, we need to reconfigure the system
                send('request_reconfiguration_replica') to Olympus
            else:
                init_request(request_id) # start the request from scratch


    catch_up(set_of_operations_to_apply):
        for each operation o_c in set_of_operations_to_apply:
            result = o_c(running_state) # running_state will be modified to the new_running_state
        send('caught_up') to Olympus # send a caught_up message to Olympus after catching up with the latest running state
