# -*- generated by 1.0.9 -*-
import da
PatternExpr_211 = da.pat.TuplePattern([da.pat.ConstantPattern('Complete')])
PatternExpr_229 = da.pat.TuplePattern([da.pat.ConstantPattern('Config'), da.pat.FreePattern('olympus_'), da.pat.FreePattern('replicas_')])
PatternExpr_262 = da.pat.TuplePattern([da.pat.ConstantPattern('Put'), da.pat.FreePattern('client')])
PatternExpr_216 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Complete')])])
PatternExpr_368 = da.pat.TuplePattern([da.pat.ConstantPattern('Config Received')])
PatternExpr_377 = da.pat.TuplePattern([da.pat.ConstantPattern('Client'), da.pat.FreePattern('client')])
PatternExpr_407 = da.pat.ConstantPattern('Config Received')
PatternExpr_424 = da.pat.TuplePattern([da.pat.ConstantPattern('Complete')])
PatternExpr_411 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.ConstantPattern('Config Received')])
PatternExpr_429 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Complete')])])
PatternExpr_456 = da.pat.TuplePattern([da.pat.ConstantPattern('Config'), da.pat.FreePattern('head_')])
PatternExpr_479 = da.pat.TuplePattern([da.pat.ConstantPattern('Config'), da.pat.BoundPattern('_BoundPattern482_')])
PatternExpr_508 = da.pat.TuplePattern([da.pat.ConstantPattern('Done!')])
PatternExpr_485 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Config'), da.pat.BoundPattern('_BoundPattern495_')])])
PatternExpr_513 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Done!')])])
_config_object = {'channel': 'fifo', 'clock': 'lamport'}
from time import sleep
PENDING = 0
ACTIVE = 1
IMMUTABLE = 2

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_211, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_229, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_228]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_262, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_261])])

    def setup(self, id, **rest_564):
        super().setup(id=id, **rest_564)
        self._state.id = id
        self._state.status = PENDING
        self._state.olympus = None
        self._state.replicas = None
        self._state.head = None

    def run(self):
        self._state.status = ACTIVE
        super()._label('_st_label_208', block=False)
        _st_label_208 = 0
        while (_st_label_208 == 0):
            _st_label_208 += 1
            if PatternExpr_216.match_iter(self._ReplicaReceivedEvent_0, SELF_ID=self._id):
                _st_label_208 += 1
            else:
                super()._label('_st_label_208', block=True)
                _st_label_208 -= 1

    def _Replica_handler_228(self, olympus_, replicas_):
        self.output(('Config received by Replica ' + str(self._state.id)))
        self._state.olympus = olympus_
        self._state.replicas = replicas_
        self._state.head = self._state.replicas[0]
        self.send(('Config Received',), to=self._state.olympus)
    _Replica_handler_228._labels = None
    _Replica_handler_228._notlabels = None

    def _Replica_handler_261(self, client):
        self.output(('Request received by Replica ' + str(self._state.id)))
        if (self._state.id == 0):
            self.output('Request received from client')
            self.send(('Put', client), to=self._state.replicas[(self._state.id + 1)])
        elif (self._state.id == (len(self._state.replicas) - 1)):
            self.output('Sending result to client')
            self.send(('Done!',), to=client)
        else:
            self.send(('Put', client), to=self._state.replicas[(self._state.id + 1)])
    _Replica_handler_261._labels = None
    _Replica_handler_261._notlabels = None

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_2 = []
        self._OlympusReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_368, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_367]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_377, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_376]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_407, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_3', PatternExpr_424, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, num_replicas, **rest_564):
        super().setup(num_replicas=num_replicas, **rest_564)
        self._state.num_replicas = num_replicas
        self._state.replicas = list()
        self._state.head = None
        for i in range(self._state.num_replicas):
            replica = self.new(Replica, args=(i,))
            if (i == 0):
                self._state.head = replica
            self._state.replicas.append(replica)

    def run(self):
        self._start(self._state.replicas)
        self.send(('Config', self._id, self._state.replicas), to=self._state.replicas)
        super()._label('_st_label_404', block=False)
        _st_label_404 = 0
        while (_st_label_404 == 0):
            _st_label_404 += 1
            if PatternExpr_411.match_iter(self._OlympusReceivedEvent_2, SELF_ID=self._id):
                _st_label_404 += 1
            else:
                super()._label('_st_label_404', block=True)
                _st_label_404 -= 1
        super()._label('_st_label_421', block=False)
        _st_label_421 = 0
        while (_st_label_421 == 0):
            _st_label_421 += 1
            if PatternExpr_429.match_iter(self._OlympusReceivedEvent_3, SELF_ID=self._id):
                _st_label_421 += 1
            else:
                super()._label('_st_label_421', block=True)
                _st_label_421 -= 1

    def _Olympus_handler_367(self):
        self.output('Config received ack')
    _Olympus_handler_367._labels = None
    _Olympus_handler_367._notlabels = None

    def _Olympus_handler_376(self, client):
        self.output('Olympus has received get config request')
        self.send(('Config', self._state.head), to=client)
    _Olympus_handler_376._labels = None
    _Olympus_handler_376._notlabels = None

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_1 = []
        self._ClientReceivedEvent_2 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_456, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_455]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_479, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_508, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, olympus, **rest_564):
        super().setup(olympus=olympus, **rest_564)
        self._state.olympus = olympus
        self._state.head = None

    def run(self):
        self.send(('Client', self._id), to=self._state.olympus)
        super()._label('_st_label_476', block=False)
        _st_label_476 = 0
        while (_st_label_476 == 0):
            _st_label_476 += 1
            if PatternExpr_485.match_iter(self._ClientReceivedEvent_1, _BoundPattern495_=self._state.head, SELF_ID=self._id):
                _st_label_476 += 1
            else:
                super()._label('_st_label_476', block=True)
                _st_label_476 -= 1
        self.send(('Put', self._id), to=self._state.head)
        self.output('Message sent to head')
        super()._label('_st_label_505', block=False)
        _st_label_505 = 0
        while (_st_label_505 == 0):
            _st_label_505 += 1
            if PatternExpr_513.match_iter(self._ClientReceivedEvent_2, SELF_ID=self._id):
                _st_label_505 += 1
            else:
                super()._label('_st_label_505', block=True)
                _st_label_505 -= 1
        self.output('Result received by client')
        self.send(('Complete',), to=self._state.olympus)
        self.send(('Complete',), to=self._state.head)

    def _Client_handler_455(self, head_):
        self.output('Config received ack by client')
        self._state.head = head_
    _Client_handler_455._labels = None
    _Client_handler_455._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        olympus = self.new(Olympus, args=(3,))
        client = self.new(Client, args=(olympus,))
        self._start(olympus)
        sleep(1)
        self._start(client)
