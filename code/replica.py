# -*- generated by 1.0.9 -*-
import da
PatternExpr_303 = da.pat.ConstantPattern('Shutdown')
PatternExpr_307 = da.pat.BoundPattern('_BoundPattern308_')
PatternExpr_321 = da.pat.ConstantPattern('Shutdown')
PatternExpr_325 = da.pat.FreePattern('olympus')
PatternExpr_337 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.FreePattern('olympus_'), da.pat.FreePattern('replicas_'), da.pat.FreePattern('head_'), da.pat.FreePattern('tail_'), da.pat.FreePattern('replica_public_keys_')])
PatternExpr_387 = da.pat.TuplePattern([da.pat.ConstantPattern('Key'), da.pat.FreePattern('private_key_')])
PatternExpr_409 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Request'), da.pat.FreePattern('type'), da.pat.FreePattern('request_from'), da.pat.FreePattern('client'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('args')])
PatternExpr_638 = da.pat.BoundPattern('_BoundPattern644_')
PatternExpr_797 = da.pat.BoundPattern('_BoundPattern803_')
PatternExpr_836 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Result_shuttle'), da.pat.FreePattern('request_from'), da.pat.FreePattern('request_id'), da.pat.FreePattern('client_id'), da.pat.FreePattern('result_shuttle')])
PatternExpr_309 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern315_')]), da.pat.ConstantPattern('Shutdown')])
PatternExpr_646 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern653_')])
PatternExpr_805 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern812_')])
PatternExpr_1391 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.FreePattern('sender')])
PatternExpr_1408 = da.pat.TuplePattern([da.pat.ConstantPattern('Get_configuration'), da.pat.FreePattern('client'), da.pat.FreePattern('client_name')])
PatternExpr_1440 = da.pat.TuplePattern([da.pat.ConstantPattern('Reconfiguration'), da.pat.FreePattern('sender'), da.pat.FreePattern('proof_of_misbehavior')])
PatternExpr_1495 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])
PatternExpr_1518 = da.pat.ConstantPattern('Shutdown')
PatternExpr_1502 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.ConstantPattern(None)])])
PatternExpr_1522 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.ConstantPattern('Shutdown')])
PatternExpr_1578 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.FreePattern('replicas_'), da.pat.FreePattern('head_')])
PatternExpr_1587 = da.pat.FreePattern('olympus')
PatternExpr_1608 = da.pat.TuplePattern([da.pat.ConstantPattern('Keys'), da.pat.FreePattern('replica_public_keys_')])
PatternExpr_1615 = da.pat.FreePattern('olympus')
PatternExpr_1641 = da.pat.TuplePattern([da.pat.FreePattern('sender_id'), da.pat.ConstantPattern('Operation_result'), da.pat.FreePattern('result_shuttle')])
PatternExpr_1719 = da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.BoundPattern('_BoundPattern1722_'), da.pat.BoundPattern('_BoundPattern1723_')])
PatternExpr_1776 = da.pat.BoundPattern('_BoundPattern1782_')
PatternExpr_1815 = da.pat.ConstantPattern('Shutdown')
PatternExpr_1726 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Configuration'), da.pat.BoundPattern('_BoundPattern1736_'), da.pat.BoundPattern('_BoundPattern1737_')])])
PatternExpr_1784 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.BoundPattern('_BoundPattern1791_')])
PatternExpr_1819 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.ConstantPattern('Shutdown')])
_config_object = {'channel': {'reliable', 'fifo'}}
from nacl.hash import sha256
from nacl.encoding import HexEncoder
from nacl.signing import SigningKey, VerifyKey
from nacl.exceptions import BadSignatureError
from ast import literal_eval
client_running_state = dict()

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_0 = []
        self._ReplicaReceivedEvent_5 = []
        self._ReplicaReceivedEvent_6 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_303, sources=[PatternExpr_307], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_321, sources=[PatternExpr_325], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_320]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_337, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_336]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_387, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_386]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_409, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_408]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_5', PatternExpr_638, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_6', PatternExpr_797, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_7', PatternExpr_836, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_835])])

    def setup(self, id, name, replica_failures, replica_timeout, **rest_2147):
        super().setup(id=id, name=name, replica_failures=replica_failures, replica_timeout=replica_timeout, **rest_2147)
        self._state.id = id
        self._state.name = name
        self._state.replica_failures = replica_failures
        self._state.replica_timeout = replica_timeout
        self._state.status = 0
        self._state.running_state = dict()
        self._state.order_proof = list()
        self._state.result_proof = list()
        self._state.result_cache = dict()
        self._state.slot_number = 0
        self._state.olympus = None
        self._state.replicas = None
        self._state.head = None
        self._state.tail = None
        self._state.replica_public_keys = None
        self._state.private_key = None
        self._state.messages_received_from_client = {}
        self._state.messages_shuttle = {}
        self._state.messages_result_shuttle = {}
        self._state.messages_forwared_request = {}

    def run(self):
        self._state.status = 1
        super()._label('_st_label_300', block=False)
        _st_label_300 = 0
        while (_st_label_300 == 0):
            _st_label_300 += 1
            if PatternExpr_309.match_iter(self._ReplicaReceivedEvent_0, _BoundPattern315_=self._state.olympus, SELF_ID=self._id):
                _st_label_300 += 1
            else:
                super()._label('_st_label_300', block=True)
                _st_label_300 -= 1

    def update_running_state(self, type, args):
        if (type == 'put'):
            if (len(args) > 1):
                self._state.running_state[args[0]] = args[1]
            return 'OK'
        elif (type == 'get'):
            if (len(args) > 0):
                if (args[0] in self._state.running_state):
                    return self._state.running_state[args[0]]
                else:
                    return ''
        elif (type == 'slice'):
            if (len(args) > 1):
                if ((args[0] in self._state.running_state) and (args[1] <= len(self._state.running_state[args[0]]))):
                    self._state.running_state[args[0]] = self._state.running_state[args[0]][int(args[1]):]
                    return self._state.running_state[args[0]]
                else:
                    return 'fail'
        elif (type == 'append'):
            if (len(args) > 1):
                if (args[0] in self._state.running_state):
                    self._state.running_state[args[0]] = (self._state.running_state[args[0]] + args[1])
                    return 'OK'
                else:
                    return 'fail'

    def calculate_hash(self, val):
        if isinstance(val, str):
            return sha256(str.encode(val), encoder=HexEncoder)
        return sha256(val, encoder=HexEncoder)

    def validate_shuttle(self, slot_number, operation, shuttle):
        (self._state.order_proof, self._state.result_proof) = shuttle
        for i in self._state.order_proof:
            if ((i[0] == slot_number) and (not (i[1] == operation))):
                return False
        hash = self._state.result_proof[0][1]
        for i in self._state.result_proof:
            if ((not (i[0] == operation)) or (not (i[1] == hash))):
                return False
        return True

    def validate_result_shuttle(self, result_shuttle):
        (result, self._state.result_proof) = result_shuttle
        hash = self.calculate_hash(result)
        for i in self._state.result_proof:
            if (not (hash == i[1])):
                return False
        return True

    def send_(self, data, to_):
        data = ([self._state.id] + list(data))
        data[(- 1)] = self._state.private_key.sign(str(data[(- 1)]).encode('utf-8'))
        self.send(tuple(data), to=to_)

    def _Replica_handler_320(self, olympus):
        self._state.status = 2
        self.output((self._state.name + ' is immutable and shutting down.'))
    _Replica_handler_320._labels = None
    _Replica_handler_320._notlabels = None

    def _Replica_handler_336(self, olympus_, replicas_, head_, tail_, replica_public_keys_):
        self._state.olympus = olympus_
        self._state.replicas = replicas_
        self._state.head = head_
        self._state.tail = tail_
        self._state.replica_public_keys = [VerifyKey(key, encoder=HexEncoder) for key in replica_public_keys_]
        self.output((self._state.name + ' is configured.'))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_336._labels = None
    _Replica_handler_336._notlabels = None

    def _Replica_handler_386(self, private_key_):
        self._state.private_key = private_key_
        self.output((self._state.name + ' have received its private key from Olympus.'))
        self.send(('ACK', self._state.name), to=self._state.olympus)
    _Replica_handler_386._labels = None
    _Replica_handler_386._notlabels = None

    def _Replica_handler_408(self, sender_id, type, request_from, client, request_id, client_id, args):
        self.output((((((str(type) + ' request with request id ') + str(request_id)) + ' received by ') + self._state.name) + '.'))
        if (self._state.status == 0):
            self.output((self._state.name + ' is in PENDING state.'))
        elif (self._state.status == 1):
            self.output((self._state.name + ' is in ACTIVE state.'))
        elif (self._state.status == 2):
            self.output((self._state.name + ' is in IMMUTABLE state.'))
        if (self._state.status == 1):
            if (request_from == client):
                if (not (client_id in self._state.messages_received_from_client)):
                    self._state.messages_received_from_client[client_id] = 0
                self._state.messages_received_from_client[client_id] += 1
                if (request_id in self._state.result_cache):
                    self.send_(('Operation_result', self._state.result_cache[request_id]), client)
                    self.output((('Result sent from cache of ' + self._state.name) + '.'))
                    return
                elif (not (self._id == self._state.head)):
                    self.send_(('Request', type, self._id, client, request_id, client_id, args), self._state.head)
                    return
            else:
                if (not (client_id in self._state.messages_forwared_request)):
                    self._state.messages_forwared_request[client_id] = 0
                self._state.messages_forwared_request[client_id] += 1
                try:
                    self._state.replica_public_keys[sender_id].verify(args)
                    args = literal_eval(args.message.decode('utf-8'))
                except BadSignatureError:
                    self.output((('Verification of message sent by Replica ' + sender_id) + ' has failed.'))
                    return
            if (self._id == self._state.head):
                result = self.update_running_state(type, args)
                self._state.slot_number += 1
                self._state.order_proof.append([self._state.slot_number, (type, args)])
                self._state.result_proof = list()
                self._state.result_proof.append([(type, args), self.calculate_hash(result)])
                shuttle = (self._state.order_proof, self._state.result_proof)
                self.send_(('Request', type, self._id, client, request_id, client_id, [self._state.slot_number, (type, args), shuttle]), self._state.replicas[(self._state.id + 1)])
                super()._label('_st_label_635', block=False)
                _st_label_635 = 0
                self._timer_start()
                while (_st_label_635 == 0):
                    _st_label_635 += 1
                    if PatternExpr_646.match_iter(self._ReplicaReceivedEvent_5, _BoundPattern653_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                        pass
                        _st_label_635 += 1
                    elif self._timer_expired:
                        self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                        _st_label_635 += 1
                    else:
                        super()._label('_st_label_635', block=True, timeout=self._state.replica_timeout)
                        _st_label_635 -= 1
            else:
                (self._state.slot_number, operation, shuttle) = args
                if (not (client_id in self._state.messages_shuttle)):
                    self._state.messages_shuttle[client_id] = 0
                self._state.messages_shuttle[client_id] += 1
                if self.validate_shuttle(self._state.slot_number, operation, shuttle):
                    (type, operation_args) = operation
                    (self._state.order_proof, self._state.result_proof) = shuttle
                    result = self.update_running_state(type, operation_args)
                    self._state.order_proof.append([self._state.slot_number, (type, operation_args)])
                    self._state.result_proof.append([(type, operation_args), self.calculate_hash(result)])
                    shuttle = (self._state.order_proof, self._state.result_proof)
                    if (self._id == self._state.tail):
                        result_shuttle = [result, self._state.result_proof]
                        self.send_(('Operation_result', result_shuttle), client)
                        self.send(('Operation_result_' + str(request_id)), to=client)
                        self.send_(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.tail)
                    else:
                        self.send_(('Request', type, self._id, client, request_id, client_id, [self._state.slot_number, (type, operation_args), shuttle]), self._state.replicas[(self._state.id + 1)])
                        super()._label('_st_label_794', block=False)
                        _st_label_794 = 0
                        self._timer_start()
                        while (_st_label_794 == 0):
                            _st_label_794 += 1
                            if PatternExpr_805.match_iter(self._ReplicaReceivedEvent_6, _BoundPattern812_=('Result_shuttle_' + str(request_id)), SELF_ID=self._id):
                                pass
                                _st_label_794 += 1
                            elif self._timer_expired:
                                self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
                                _st_label_794 += 1
                            else:
                                super()._label('_st_label_794', block=True, timeout=self._state.replica_timeout)
                                _st_label_794 -= 1
                else:
                    self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
    _Replica_handler_408._labels = None
    _Replica_handler_408._notlabels = None

    def _Replica_handler_835(self, sender_id, request_from, request_id, client_id, result_shuttle):
        if (not (client_id in self._state.messages_result_shuttle)):
            self._state.messages_result_shuttle[client_id] = 0
        if (not (client_id in self._state.messages_shuttle)):
            self._state.messages_shuttle[client_id] = 0
        self._state.messages_result_shuttle[client_id] += 1
        self._state.messages_shuttle[client_id] += 1
        try:
            self._state.replica_public_keys[sender_id].verify(result_shuttle)
            result_shuttle = literal_eval(result_shuttle.message.decode('utf-8'))
        except BadSignatureError:
            self.output((('Verification of message sent by Replica ' + sender_id) + ' has failed.'))
            return
        if self.validate_result_shuttle(result_shuttle):
            self._state.result_cache[request_id] = result_shuttle
            if (not (self._id == self._state.head)):
                self.send_(('Result_shuttle', self._id, request_id, client_id, result_shuttle), self._state.replicas[(self._state.id - 1)])
                self.send(('Result_shuttle_' + str(request_id)), to=self._state.replicas[(self._state.id - 1)])
            self.output((('Result shuttle is at ' + self._state.name) + '.'))
        else:
            self.output((('Result shuttle sent by Replica ' + sender_id) + ' is not valid.'))
            self.send(('Reconfiguration', self._state.name, None), to=self._state.olympus)
    _Replica_handler_835._labels = None
    _Replica_handler_835._notlabels = None

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_3 = []
        self._OlympusReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_1391, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1390]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_1408, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1407]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_1440, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1439]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_3', PatternExpr_1495, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_4', PatternExpr_1518, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, name, num_replicas, replica_failures, head_timeout, replica_timeout, **rest_2147):
        super().setup(name=name, num_replicas=num_replicas, replica_failures=replica_failures, head_timeout=head_timeout, replica_timeout=replica_timeout, **rest_2147)
        self._state.name = name
        self._state.num_replicas = num_replicas
        self._state.replica_failures = replica_failures
        self._state.head_timeout = head_timeout
        self._state.replica_timeout = replica_timeout
        self._state.replicas = list()
        self._state.replica_private_keys = list()
        self._state.replica_public_keys = list()
        self._state.head = None
        self._state.tail = None
        self._state.configuration = None
        for i in range(self._state.num_replicas):
            if (i == 0):
                replica = self.new(Replica, args=(i, 'Head', self._state.replica_failures, self._state.head_timeout))
                self._state.head = replica
            elif (i == (self._state.num_replicas - 1)):
                replica = self.new(Replica, args=(i, 'Tail', self._state.replica_failures, self._state.replica_timeout))
                self._state.tail = replica
            else:
                replica = self.new(Replica, args=(i, ('Replica ' + str(i)), self._state.replica_failures, self._state.replica_timeout))
            self._state.replicas.append(replica)
            signing_key = SigningKey.generate()
            verify_key = signing_key.verify_key.encode(encoder=HexEncoder)
            self._state.replica_private_keys.append(signing_key)
            self._state.replica_public_keys.append(verify_key)

    def run(self):
        self._start(self._state.replicas)
        self.send(('Configuration', self._id, self._state.replicas, self._state.head, self._state.tail, self._state.replica_public_keys), to=self._state.replicas)
        for i in range(len(self._state.replicas)):
            self.send(('Key', self._state.replica_private_keys[i]), to=self._state.replicas[i])
        super()._label('_st_label_1492', block=False)
        _st_label_1492 = 0
        while (_st_label_1492 == 0):
            _st_label_1492 += 1
            if PatternExpr_1502.match_iter(self._OlympusReceivedEvent_3, SELF_ID=self._id):
                _st_label_1492 += 1
            else:
                super()._label('_st_label_1492', block=True)
                _st_label_1492 -= 1
        super()._label('_st_label_1515', block=False)
        _st_label_1515 = 0
        while (_st_label_1515 == 0):
            _st_label_1515 += 1
            if PatternExpr_1522.match_iter(self._OlympusReceivedEvent_4, SELF_ID=self._id):
                _st_label_1515 += 1
            else:
                super()._label('_st_label_1515', block=True)
                _st_label_1515 -= 1

    def _Olympus_handler_1390(self, sender):
        self.output((('ACK from ' + str(sender)) + '.'))
    _Olympus_handler_1390._labels = None
    _Olympus_handler_1390._notlabels = None

    def _Olympus_handler_1407(self, client, client_name):
        self.send(('Configuration', self._state.replicas, self._state.head), to=client)
        self.send(('Keys', self._state.replica_public_keys), to=client)
        self.output((('Configuration sent to ' + str(client_name)) + '.'))
    _Olympus_handler_1407._labels = None
    _Olympus_handler_1407._notlabels = None

    def _Olympus_handler_1439(self, sender, proof_of_misbehavior):
        self.output((('Reconfiguration request received from ' + str(sender)) + '.'))
        self.output('No reconfiguration mechanism implemented yet.')
    _Olympus_handler_1439._labels = None
    _Olympus_handler_1439._notlabels = None

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_3 = []
        self._ClientReceivedEvent_4 = []
        self._ClientReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_1578, sources=[PatternExpr_1587], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_1577]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_1608, sources=[PatternExpr_1615], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_1607]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_1641, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_1640]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_1719, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_4', PatternExpr_1776, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_5', PatternExpr_1815, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, client_id, olympus, request_id, client_timeout, operations, **rest_2147):
        super().setup(client_id=client_id, olympus=olympus, request_id=request_id, client_timeout=client_timeout, operations=operations, **rest_2147)
        self._state.client_id = client_id
        self._state.olympus = olympus
        self._state.request_id = request_id
        self._state.client_timeout = client_timeout
        self._state.operations = operations
        self._state.name = ('Client ' + str(self._state.client_id))
        self._state.replicas = None
        self._state.head = None
        self._state.replica_public_keys = None

    def run(self):
        if (self._state.replicas is None):
            self.send(('Get_configuration', self._id, self._state.name), to=self._state.olympus)
            super()._label('_st_label_1716', block=False)
            _st_label_1716 = 0
            while (_st_label_1716 == 0):
                _st_label_1716 += 1
                if PatternExpr_1726.match_iter(self._ClientReceivedEvent_3, _BoundPattern1736_=self._state.replicas, _BoundPattern1737_=self._state.head, SELF_ID=self._id):
                    _st_label_1716 += 1
                else:
                    super()._label('_st_label_1716', block=True)
                    _st_label_1716 -= 1
        for op in self._state.operations:
            self.output((('Local client state is updated with response ' + self.update_client_running_state(op[0], op[1])) + '.'))
            retry = 0
            while True:
                self.send_request(op[0], op[1], retry)
                super()._label('_st_label_1773', block=False)
                _st_label_1773 = 0
                self._timer_start()
                while (_st_label_1773 == 0):
                    _st_label_1773 += 1
                    if PatternExpr_1784.match_iter(self._ClientReceivedEvent_4, _BoundPattern1791_=('Operation_result_' + str(self._state.request_id)), SELF_ID=self._id):
                        break
                        _st_label_1773 += 1
                    elif self._timer_expired:
                        self.output('Timeout: Retrying.')
                        retry = 1
                        _st_label_1773 += 1
                    else:
                        super()._label('_st_label_1773', block=True, timeout=self._state.client_timeout)
                        _st_label_1773 -= 1
                else:
                    if (_st_label_1773 != 2):
                        continue
                if (_st_label_1773 != 2):
                    break
        self.output((('Local running state of client after the given set of operations: ' + str(client_running_state)) + '.'))
        super()._label('_st_label_1812', block=False)
        _st_label_1812 = 0
        while (_st_label_1812 == 0):
            _st_label_1812 += 1
            if PatternExpr_1819.match_iter(self._ClientReceivedEvent_5, SELF_ID=self._id):
                _st_label_1812 += 1
            else:
                super()._label('_st_label_1812', block=True)
                _st_label_1812 -= 1

    def update_client_running_state(self, type, args):
        if (type == 'put'):
            if (len(args) > 1):
                client_running_state[args[0]] = args[1]
            return 'OK'
        elif (type == 'get'):
            if (len(args) > 0):
                if (args[0] in client_running_state):
                    return client_running_state[args[0]]
                else:
                    return ''
        elif (type == 'slice'):
            if (len(args) > 1):
                if ((args[0] in client_running_state) and (args[1] <= len(client_running_state[args[0]]))):
                    client_running_state[args[0]] = client_running_state[args[0]][int(args[1]):]
                    return client_running_state[args[0]]
                else:
                    return 'fail'
        elif (type == 'append'):
            if (len(args) > 1):
                if (args[0] in client_running_state):
                    client_running_state[args[0]] = (client_running_state[args[0]] + args[1])
                    return 'OK'
                else:
                    return 'fail'

    def send_request(self, type, args, retry):
        if retry:
            self.send((None, 'Request', type, self._id, self._id, self._state.request_id, self._state.client_id, args), to=self._state.head)
        else:
            self._state.request_id += 1
            self.send((None, 'Request', type, self._id, self._id, self._state.request_id, self._state.client_id, args), to=self._state.head)

    def validate_result(self, result, result_proof):
        hash = self.calculate_hash(result)
        for i in result_proof:
            if (not (hash == i[1])):
                return False
        return True

    def calculate_hash(self, val):
        if isinstance(val, str):
            return sha256(str.encode(val), encoder=HexEncoder)
        return sha256(val, encoder=HexEncoder)

    def _Client_handler_1577(self, replicas_, head_, olympus):
        self._state.replicas = replicas_
        self._state.head = head_
        self.output((self._state.name + ' is configured.'))
        self.send(('ACK', self._state.name), to=olympus)
    _Client_handler_1577._labels = None
    _Client_handler_1577._notlabels = None

    def _Client_handler_1607(self, replica_public_keys_, olympus):
        self._state.replica_public_keys = [VerifyKey(key, encoder=HexEncoder) for key in replica_public_keys_]
        self.output((self._state.name + ' received the public keys of replicas from Olympus.'))
        self.send(('ACK', self._state.name), to=olympus)
    _Client_handler_1607._labels = None
    _Client_handler_1607._notlabels = None

    def _Client_handler_1640(self, sender_id, result_shuttle):
        try:
            self._state.replica_public_keys[sender_id].verify(result_shuttle)
            result_shuttle = literal_eval(result_shuttle.message.decode('utf-8'))
        except BadSignatureError:
            self.output((('Verification of message sent by Replica ' + sender_id) + ' has failed.'))
            return
        (result, result_proof) = result_shuttle
        if self.validate_result(result, result_proof):
            self.output((((result + ' received by ') + self._state.name) + '.'))
        else:
            self.send(('Reconfiguration', self._state.name, result_shuttle), to=self._state.olympus)
    _Client_handler_1640._labels = None
    _Client_handler_1640._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        (num_replicas, request_id_counter, client_timeout) = (3, 0, 10)
        (client_id, message_number) = (1, 10)
        (head_timeout, replica_timeout) = (3, 3)
        replica_failures = [('client_request', client_id, message_number, 'change_operation')]
        olympus = self.new(Olympus, args=('Olympus', num_replicas, replica_failures, head_timeout, replica_timeout))
        self._start(olympus)
        operations = [('put', ['name', 'ankit']), ('get', ['name']), ('append', ['name', 'aggarwal']), ('get', ['name']), ('slice', ['name', 5]), ('get', ['name'])]
        client_id = 1
        client = self.new(Client, args=(client_id, olympus, request_id_counter, client_timeout, operations))
        self._start(client)
